{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.resolveURI = factory());\n})(this, function () {\n  'use strict'; // Matches the scheme of a URL, eg \"http://\"\n\n  const schemeRegex = /^[\\w+.-]+:\\/\\//;\n  /**\n   * Matches the parts of a URL:\n   * 1. Scheme, including \":\", guaranteed.\n   * 2. User/password, including \"@\", optional.\n   * 3. Host, guaranteed.\n   * 4. Port, including \":\", optional.\n   * 5. Path, including \"/\", optional.\n   */\n\n  const urlRegex = /^([\\w+.-]+:)\\/\\/([^@/#?]*@)?([^:/#?]*)(:\\d+)?(\\/[^#?]*)?/;\n\n  function isAbsoluteUrl(input) {\n    return schemeRegex.test(input);\n  }\n\n  function isSchemeRelativeUrl(input) {\n    return input.startsWith('//');\n  }\n\n  function isAbsolutePath(input) {\n    return input.startsWith('/');\n  }\n\n  function parseAbsoluteUrl(input) {\n    const match = urlRegex.exec(input);\n    return {\n      scheme: match[1],\n      user: match[2] || '',\n      host: match[3],\n      port: match[4] || '',\n      path: match[5] || '/',\n      relativePath: false\n    };\n  }\n\n  function parseUrl(input) {\n    if (isSchemeRelativeUrl(input)) {\n      const url = parseAbsoluteUrl('http:' + input);\n      url.scheme = '';\n      return url;\n    }\n\n    if (isAbsolutePath(input)) {\n      const url = parseAbsoluteUrl('http://foo.com' + input);\n      url.scheme = '';\n      url.host = '';\n      return url;\n    }\n\n    if (!isAbsoluteUrl(input)) {\n      const url = parseAbsoluteUrl('http://foo.com/' + input);\n      url.scheme = '';\n      url.host = '';\n      url.relativePath = true;\n      return url;\n    }\n\n    return parseAbsoluteUrl(input);\n  }\n\n  function stripPathFilename(path) {\n    // If a path ends with a parent directory \"..\", then it's a relative path with excess parent\n    // paths. It's not a file, so we can't strip it.\n    if (path.endsWith('/..')) return path;\n    const index = path.lastIndexOf('/');\n    return path.slice(0, index + 1);\n  }\n\n  function mergePaths(url, base) {\n    // If we're not a relative path, then we're an absolute path, and it doesn't matter what base is.\n    if (!url.relativePath) return;\n    normalizePath(base); // If the path is just a \"/\", then it was an empty path to begin with (remember, we're a relative\n    // path).\n\n    if (url.path === '/') {\n      url.path = base.path;\n    } else {\n      // Resolution happens relative to the base path's directory, not the file.\n      url.path = stripPathFilename(base.path) + url.path;\n    } // If the base path is absolute, then our path is now absolute too.\n\n\n    url.relativePath = base.relativePath;\n  }\n  /**\n   * The path can have empty directories \"//\", unneeded parents \"foo/..\", or current directory\n   * \"foo/.\". We need to normalize to a standard representation.\n   */\n\n\n  function normalizePath(url) {\n    const {\n      relativePath\n    } = url;\n    const pieces = url.path.split('/'); // We need to preserve the first piece always, so that we output a leading slash. The item at\n    // pieces[0] is an empty string.\n\n    let pointer = 1; // Positive is the number of real directories we've output, used for popping a parent directory.\n    // Eg, \"foo/bar/..\" will have a positive 2, and we can decrement to be left with just \"foo\".\n\n    let positive = 0; // We need to keep a trailing slash if we encounter an empty directory (eg, splitting \"foo/\" will\n    // generate `[\"foo\", \"\"]` pieces). And, if we pop a parent directory. But once we encounter a\n    // real directory, we won't need to append, unless the other conditions happen again.\n\n    let addTrailingSlash = false;\n\n    for (let i = 1; i < pieces.length; i++) {\n      const piece = pieces[i]; // An empty directory, could be a trailing slash, or just a double \"//\" in the path.\n\n      if (!piece) {\n        addTrailingSlash = true;\n        continue;\n      } // If we encounter a real directory, then we don't need to append anymore.\n\n\n      addTrailingSlash = false; // A current directory, which we can always drop.\n\n      if (piece === '.') continue; // A parent directory, we need to see if there are any real directories we can pop. Else, we\n      // have an excess of parents, and we'll need to keep the \"..\".\n\n      if (piece === '..') {\n        if (positive) {\n          addTrailingSlash = true;\n          positive--;\n          pointer--;\n        } else if (relativePath) {\n          // If we're in a relativePath, then we need to keep the excess parents. Else, in an absolute\n          // URL, protocol relative URL, or an absolute path, we don't need to keep excess.\n          pieces[pointer++] = piece;\n        }\n\n        continue;\n      } // We've encountered a real directory. Move it to the next insertion pointer, which accounts for\n      // any popped or dropped directories.\n\n\n      pieces[pointer++] = piece;\n      positive++;\n    }\n\n    let path = '';\n\n    for (let i = 1; i < pointer; i++) {\n      path += '/' + pieces[i];\n    }\n\n    if (!path || addTrailingSlash && !path.endsWith('/..')) {\n      path += '/';\n    }\n\n    url.path = path;\n  }\n  /**\n   * Attempts to resolve `input` URL/path relative to `base`.\n   */\n\n\n  function resolve(input, base) {\n    if (!input && !base) return '';\n    const url = parseUrl(input); // If we have a base, and the input isn't already an absolute URL, then we need to merge.\n\n    if (base && !url.scheme) {\n      const baseUrl = parseUrl(base);\n      url.scheme = baseUrl.scheme; // If there's no host, then we were just a path.\n\n      if (!url.host || baseUrl.scheme === 'file:') {\n        // The host, user, and port are joined, you can't copy one without the others.\n        url.user = baseUrl.user;\n        url.host = baseUrl.host;\n        url.port = baseUrl.port;\n      }\n\n      mergePaths(url, baseUrl);\n    }\n\n    normalizePath(url); // If the input (and base, if there was one) are both relative, then we need to output a relative.\n\n    if (url.relativePath) {\n      // The first char is always a \"/\".\n      const path = url.path.slice(1);\n      if (!path) return '.'; // If base started with a leading \".\", or there is no base and input started with a \".\", then we\n      // need to ensure that the relative path starts with a \".\". We don't know if relative starts\n      // with a \"..\", though, so check before prepending.\n\n      const keepRelative = (base || input).startsWith('.');\n      return !keepRelative || path.startsWith('.') ? path : './' + path;\n    } // If there's no host (and no scheme/user/port), then we need to output an absolute path.\n\n\n    if (!url.scheme && !url.host) return url.path; // We're outputting either an absolute URL, or a protocol relative one.\n\n    return `${url.scheme}//${url.user}${url.host}${url.port}${url.path}`;\n  }\n\n  return resolve;\n});","map":{"version":3,"mappings":"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","names":["schemeRegex","urlRegex","isAbsoluteUrl","input","test","isSchemeRelativeUrl","startsWith","isAbsolutePath","parseAbsoluteUrl","match","exec","scheme","user","host","port","path","relativePath","parseUrl","url","stripPathFilename","endsWith","index","lastIndexOf","slice","mergePaths","base","normalizePath","pieces","split","pointer","positive","addTrailingSlash","i","length","piece","resolve","baseUrl","keepRelative"],"sources":["/Users/rafaeljordao/Documents/my-portfolio/node_modules/@jridgewell/src/resolve-uri.ts"],"sourcesContent":["// Matches the scheme of a URL, eg \"http://\"\nconst schemeRegex = /^[\\w+.-]+:\\/\\//;\n\n/**\n * Matches the parts of a URL:\n * 1. Scheme, including \":\", guaranteed.\n * 2. User/password, including \"@\", optional.\n * 3. Host, guaranteed.\n * 4. Port, including \":\", optional.\n * 5. Path, including \"/\", optional.\n */\nconst urlRegex = /^([\\w+.-]+:)\\/\\/([^@/#?]*@)?([^:/#?]*)(:\\d+)?(\\/[^#?]*)?/;\n\ntype Url = {\n  scheme: string;\n  user: string;\n  host: string;\n  port: string;\n  path: string;\n  relativePath: boolean;\n};\n\nfunction isAbsoluteUrl(input: string): boolean {\n  return schemeRegex.test(input);\n}\n\nfunction isSchemeRelativeUrl(input: string): boolean {\n  return input.startsWith('//');\n}\n\nfunction isAbsolutePath(input: string): boolean {\n  return input.startsWith('/');\n}\n\nfunction parseAbsoluteUrl(input: string): Url {\n  const match = urlRegex.exec(input)!;\n  return {\n    scheme: match[1],\n    user: match[2] || '',\n    host: match[3],\n    port: match[4] || '',\n    path: match[5] || '/',\n    relativePath: false,\n  };\n}\n\nfunction parseUrl(input: string): Url {\n  if (isSchemeRelativeUrl(input)) {\n    const url = parseAbsoluteUrl('http:' + input);\n    url.scheme = '';\n    return url;\n  }\n  if (isAbsolutePath(input)) {\n    const url = parseAbsoluteUrl('http://foo.com' + input);\n    url.scheme = '';\n    url.host = '';\n    return url;\n  }\n  if (!isAbsoluteUrl(input)) {\n    const url = parseAbsoluteUrl('http://foo.com/' + input);\n    url.scheme = '';\n    url.host = '';\n    url.relativePath = true;\n    return url;\n  }\n  return parseAbsoluteUrl(input);\n}\n\nfunction stripPathFilename(path: string): string {\n  // If a path ends with a parent directory \"..\", then it's a relative path with excess parent\n  // paths. It's not a file, so we can't strip it.\n  if (path.endsWith('/..')) return path;\n  const index = path.lastIndexOf('/');\n  return path.slice(0, index + 1);\n}\n\nfunction mergePaths(url: Url, base: Url) {\n  // If we're not a relative path, then we're an absolute path, and it doesn't matter what base is.\n  if (!url.relativePath) return;\n\n  normalizePath(base);\n\n  // If the path is just a \"/\", then it was an empty path to begin with (remember, we're a relative\n  // path).\n  if (url.path === '/') {\n    url.path = base.path;\n  } else {\n    // Resolution happens relative to the base path's directory, not the file.\n    url.path = stripPathFilename(base.path) + url.path;\n  }\n\n  // If the base path is absolute, then our path is now absolute too.\n  url.relativePath = base.relativePath;\n}\n\n/**\n * The path can have empty directories \"//\", unneeded parents \"foo/..\", or current directory\n * \"foo/.\". We need to normalize to a standard representation.\n */\nfunction normalizePath(url: Url) {\n  const { relativePath } = url;\n  const pieces = url.path.split('/');\n\n  // We need to preserve the first piece always, so that we output a leading slash. The item at\n  // pieces[0] is an empty string.\n  let pointer = 1;\n\n  // Positive is the number of real directories we've output, used for popping a parent directory.\n  // Eg, \"foo/bar/..\" will have a positive 2, and we can decrement to be left with just \"foo\".\n  let positive = 0;\n\n  // We need to keep a trailing slash if we encounter an empty directory (eg, splitting \"foo/\" will\n  // generate `[\"foo\", \"\"]` pieces). And, if we pop a parent directory. But once we encounter a\n  // real directory, we won't need to append, unless the other conditions happen again.\n  let addTrailingSlash = false;\n\n  for (let i = 1; i < pieces.length; i++) {\n    const piece = pieces[i];\n\n    // An empty directory, could be a trailing slash, or just a double \"//\" in the path.\n    if (!piece) {\n      addTrailingSlash = true;\n      continue;\n    }\n\n    // If we encounter a real directory, then we don't need to append anymore.\n    addTrailingSlash = false;\n\n    // A current directory, which we can always drop.\n    if (piece === '.') continue;\n\n    // A parent directory, we need to see if there are any real directories we can pop. Else, we\n    // have an excess of parents, and we'll need to keep the \"..\".\n    if (piece === '..') {\n      if (positive) {\n        addTrailingSlash = true;\n        positive--;\n        pointer--;\n      } else if (relativePath) {\n        // If we're in a relativePath, then we need to keep the excess parents. Else, in an absolute\n        // URL, protocol relative URL, or an absolute path, we don't need to keep excess.\n        pieces[pointer++] = piece;\n      }\n      continue;\n    }\n\n    // We've encountered a real directory. Move it to the next insertion pointer, which accounts for\n    // any popped or dropped directories.\n    pieces[pointer++] = piece;\n    positive++;\n  }\n\n  let path = '';\n  for (let i = 1; i < pointer; i++) {\n    path += '/' + pieces[i];\n  }\n  if (!path || (addTrailingSlash && !path.endsWith('/..'))) {\n    path += '/';\n  }\n  url.path = path;\n}\n\n/**\n * Attempts to resolve `input` URL/path relative to `base`.\n */\nexport default function resolve(input: string, base: string | undefined): string {\n  if (!input && !base) return '';\n\n  const url = parseUrl(input);\n\n  // If we have a base, and the input isn't already an absolute URL, then we need to merge.\n  if (base && !url.scheme) {\n    const baseUrl = parseUrl(base);\n    url.scheme = baseUrl.scheme;\n    // If there's no host, then we were just a path.\n    if (!url.host || baseUrl.scheme === 'file:') {\n      // The host, user, and port are joined, you can't copy one without the others.\n      url.user = baseUrl.user;\n      url.host = baseUrl.host;\n      url.port = baseUrl.port;\n    }\n    mergePaths(url, baseUrl);\n  }\n\n  normalizePath(url);\n\n  // If the input (and base, if there was one) are both relative, then we need to output a relative.\n  if (url.relativePath) {\n    // The first char is always a \"/\".\n    const path = url.path.slice(1);\n    if (!path) return '.';\n\n    // If base started with a leading \".\", or there is no base and input started with a \".\", then we\n    // need to ensure that the relative path starts with a \".\". We don't know if relative starts\n    // with a \"..\", though, so check before prepending.\n    const keepRelative = (base || input).startsWith('.');\n    return !keepRelative || path.startsWith('.') ? path : './' + path;\n  }\n  // If there's no host (and no scheme/user/port), then we need to output an absolute path.\n  if (!url.scheme && !url.host) return url.path;\n  // We're outputting either an absolute URL, or a protocol relative one.\n  return `${url.scheme}//${url.user}${url.host}${url.port}${url.path}`;\n}\n"]},"metadata":{},"sourceType":"script"}
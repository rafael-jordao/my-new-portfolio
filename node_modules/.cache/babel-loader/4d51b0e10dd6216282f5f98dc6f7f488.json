{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nclass Position {\n  constructor(line, col, index) {\n    this.line = void 0;\n    this.column = void 0;\n    this.index = void 0;\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column,\n    index\n  } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n\nconst ParseErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\n\nconst reflect = function (keys) {\n  let last = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : keys.length - 1;\n  return {\n    get() {\n      return keys.reduce((object, key) => object[key], this);\n    },\n\n    set(value) {\n      keys.reduce((item, key, i) => i === last ? item[key] = value : item[key], this);\n    }\n\n  };\n};\n\nconst instantiate = (constructor, properties, descriptors) => Object.keys(descriptors).map(key => [key, descriptors[key]]).filter(_ref2 => {\n  let [, descriptor] = _ref2;\n  return !!descriptor;\n}).map(_ref3 => {\n  let [key, descriptor] = _ref3;\n  return [key, typeof descriptor === \"function\" ? {\n    value: descriptor,\n    enumerable: false\n  } : typeof descriptor.reflect === \"string\" ? Object.assign({}, descriptor, reflect(descriptor.reflect.split(\".\"))) : descriptor];\n}).reduce((instance, _ref4) => {\n  let [key, descriptor] = _ref4;\n  return Object.defineProperty(instance, key, Object.assign({\n    configurable: true\n  }, descriptor));\n}, Object.assign(new constructor(), properties));\n\nvar ModuleErrors = _ => ({\n  ImportMetaOutsideModule: _(`import.meta may appear only with 'sourceType: \"module\"'`, {\n    code: ParseErrorCodes.SourceTypeModuleError\n  }),\n  ImportOutsideModule: _(`'import' and 'export' may appear only with 'sourceType: \"module\"'`, {\n    code: ParseErrorCodes.SourceTypeModuleError\n  })\n});\n\nconst NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\"\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\"\n};\n\nconst toNodeDescription = _ref5 => {\n  let {\n    type,\n    prefix\n  } = _ref5;\n  return type === \"UpdateExpression\" ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];\n};\n\nvar StandardErrors = _ => ({\n  AccessorIsGenerator: _(_ref6 => {\n    let {\n      kind\n    } = _ref6;\n    return `A ${kind}ter cannot be a generator.`;\n  }),\n  ArgumentsInClass: _(\"'arguments' is only allowed in functions and class methods.\"),\n  AsyncFunctionInSingleStatementContext: _(\"Async functions can only be declared at the top level or inside a block.\"),\n  AwaitBindingIdentifier: _(\"Can not use 'await' as identifier inside an async function.\"),\n  AwaitBindingIdentifierInStaticBlock: _(\"Can not use 'await' as identifier inside a static block.\"),\n  AwaitExpressionFormalParameter: _(\"'await' is not allowed in async function parameters.\"),\n  AwaitNotInAsyncContext: _(\"'await' is only allowed within async functions and at the top levels of modules.\"),\n  AwaitNotInAsyncFunction: _(\"'await' is only allowed within async functions.\"),\n  BadGetterArity: _(\"A 'get' accesor must not have any formal parameters.\"),\n  BadSetterArity: _(\"A 'set' accesor must have exactly one formal parameter.\"),\n  BadSetterRestParameter: _(\"A 'set' accesor function argument must not be a rest parameter.\"),\n  ConstructorClassField: _(\"Classes may not have a field named 'constructor'.\"),\n  ConstructorClassPrivateField: _(\"Classes may not have a private field named '#constructor'.\"),\n  ConstructorIsAccessor: _(\"Class constructor may not be an accessor.\"),\n  ConstructorIsAsync: _(\"Constructor can't be an async function.\"),\n  ConstructorIsGenerator: _(\"Constructor can't be a generator.\"),\n  DeclarationMissingInitializer: _(_ref7 => {\n    let {\n      kind\n    } = _ref7;\n    return `Missing initializer in ${kind} declaration.`;\n  }),\n  DecoratorBeforeExport: _(\"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\"),\n  DecoratorConstructor: _(\"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\"),\n  DecoratorExportClass: _(\"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\"),\n  DecoratorSemicolon: _(\"Decorators must not be followed by a semicolon.\"),\n  DecoratorStaticBlock: _(\"Decorators can't be used with a static block.\"),\n  DeletePrivateField: _(\"Deleting a private field is not allowed.\"),\n  DestructureNamedImport: _(\"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\"),\n  DuplicateConstructor: _(\"Duplicate constructor in the same class.\"),\n  DuplicateDefaultExport: _(\"Only one default export allowed per module.\"),\n  DuplicateExport: _(_ref8 => {\n    let {\n      exportName\n    } = _ref8;\n    return `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`;\n  }),\n  DuplicateProto: _(\"Redefinition of __proto__ property.\"),\n  DuplicateRegExpFlags: _(\"Duplicate regular expression flag.\"),\n  ElementAfterRest: _(\"Rest element must be last element.\"),\n  EscapedCharNotAnIdentifier: _(\"Invalid Unicode escape.\"),\n  ExportBindingIsString: _(_ref9 => {\n    let {\n      localName,\n      exportName\n    } = _ref9;\n    return `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`;\n  }),\n  ExportDefaultFromAsIdentifier: _(\"'from' is not allowed as an identifier after 'export default'.\"),\n  ForInOfLoopInitializer: _(_ref10 => {\n    let {\n      type\n    } = _ref10;\n    return `'${type === \"ForInStatement\" ? \"for-in\" : \"for-of\"}' loop variable declaration may not have an initializer.`;\n  }),\n  ForOfAsync: _(\"The left-hand side of a for-of loop may not be 'async'.\"),\n  ForOfLet: _(\"The left-hand side of a for-of loop may not start with 'let'.\"),\n  GeneratorInSingleStatementContext: _(\"Generators can only be declared at the top level or inside a block.\"),\n  IllegalBreakContinue: _(_ref11 => {\n    let {\n      type\n    } = _ref11;\n    return `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`;\n  }),\n  IllegalLanguageModeDirective: _(\"Illegal 'use strict' directive in function with non-simple parameter list.\"),\n  IllegalReturn: _(\"'return' outside of function.\"),\n  ImportBindingIsString: _(_ref12 => {\n    let {\n      importName\n    } = _ref12;\n    return `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`;\n  }),\n  ImportCallArgumentTrailingComma: _(\"Trailing comma is disallowed inside import(...) arguments.\"),\n  ImportCallArity: _(_ref13 => {\n    let {\n      maxArgumentCount\n    } = _ref13;\n    return `\\`import()\\` requires exactly ${maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"}.`;\n  }),\n  ImportCallNotNewExpression: _(\"Cannot use new with import(...).\"),\n  ImportCallSpreadArgument: _(\"`...` is not allowed in `import()`.\"),\n  IncompatibleRegExpUVFlags: _(\"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\"),\n  InvalidBigIntLiteral: _(\"Invalid BigIntLiteral.\"),\n  InvalidCodePoint: _(\"Code point out of bounds.\"),\n  InvalidCoverInitializedName: _(\"Invalid shorthand property initializer.\"),\n  InvalidDecimal: _(\"Invalid decimal.\"),\n  InvalidDigit: _(_ref14 => {\n    let {\n      radix\n    } = _ref14;\n    return `Expected number in radix ${radix}.`;\n  }),\n  InvalidEscapeSequence: _(\"Bad character escape sequence.\"),\n  InvalidEscapeSequenceTemplate: _(\"Invalid escape sequence in template.\"),\n  InvalidEscapedReservedWord: _(_ref15 => {\n    let {\n      reservedWord\n    } = _ref15;\n    return `Escape sequence in keyword ${reservedWord}.`;\n  }),\n  InvalidIdentifier: _(_ref16 => {\n    let {\n      identifierName\n    } = _ref16;\n    return `Invalid identifier ${identifierName}.`;\n  }),\n  InvalidLhs: _(_ref17 => {\n    let {\n      ancestor\n    } = _ref17;\n    return `Invalid left-hand side in ${toNodeDescription(ancestor)}.`;\n  }),\n  InvalidLhsBinding: _(_ref18 => {\n    let {\n      ancestor\n    } = _ref18;\n    return `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`;\n  }),\n  InvalidNumber: _(\"Invalid number.\"),\n  InvalidOrMissingExponent: _(\"Floating-point numbers require a valid exponent after the 'e'.\"),\n  InvalidOrUnexpectedToken: _(_ref19 => {\n    let {\n      unexpected\n    } = _ref19;\n    return `Unexpected character '${unexpected}'.`;\n  }),\n  InvalidParenthesizedAssignment: _(\"Invalid parenthesized assignment pattern.\"),\n  InvalidPrivateFieldResolution: _(_ref20 => {\n    let {\n      identifierName\n    } = _ref20;\n    return `Private name #${identifierName} is not defined.`;\n  }),\n  InvalidPropertyBindingPattern: _(\"Binding member expression.\"),\n  InvalidRecordProperty: _(\"Only properties and spread elements are allowed in record definitions.\"),\n  InvalidRestAssignmentPattern: _(\"Invalid rest operator's argument.\"),\n  LabelRedeclaration: _(_ref21 => {\n    let {\n      labelName\n    } = _ref21;\n    return `Label '${labelName}' is already declared.`;\n  }),\n  LetInLexicalBinding: _(\"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\"),\n  LineTerminatorBeforeArrow: _(\"No line break is allowed before '=>'.\"),\n  MalformedRegExpFlags: _(\"Invalid regular expression flag.\"),\n  MissingClassName: _(\"A class name is required.\"),\n  MissingEqInAssignment: _(\"Only '=' operator can be used for specifying default value.\"),\n  MissingSemicolon: _(\"Missing semicolon.\"),\n  MissingPlugin: _(_ref22 => {\n    let {\n      missingPlugin\n    } = _ref22;\n    return `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`;\n  }),\n  MissingOneOfPlugins: _(_ref23 => {\n    let {\n      missingPlugin\n    } = _ref23;\n    return `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`;\n  }),\n  MissingUnicodeEscape: _(\"Expecting Unicode escape sequence \\\\uXXXX.\"),\n  MixingCoalesceWithLogical: _(\"Nullish coalescing operator(??) requires parens when mixing with logical operators.\"),\n  ModuleAttributeDifferentFromType: _(\"The only accepted module attribute is `type`.\"),\n  ModuleAttributeInvalidValue: _(\"Only string literals are allowed as module attribute values.\"),\n  ModuleAttributesWithDuplicateKeys: _(_ref24 => {\n    let {\n      key\n    } = _ref24;\n    return `Duplicate key \"${key}\" is not allowed in module attributes.`;\n  }),\n  ModuleExportNameHasLoneSurrogate: _(_ref25 => {\n    let {\n      surrogateCharCode\n    } = _ref25;\n    return `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(16)}'.`;\n  }),\n  ModuleExportUndefined: _(_ref26 => {\n    let {\n      localName\n    } = _ref26;\n    return `Export '${localName}' is not defined.`;\n  }),\n  MultipleDefaultsInSwitch: _(\"Multiple default clauses.\"),\n  NewlineAfterThrow: _(\"Illegal newline after throw.\"),\n  NoCatchOrFinally: _(\"Missing catch or finally clause.\"),\n  NumberIdentifier: _(\"Identifier directly after number.\"),\n  NumericSeparatorInEscapeSequence: _(\"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\"),\n  ObsoleteAwaitStar: _(\"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\"),\n  OptionalChainingNoNew: _(\"Constructors in/after an Optional Chain are not allowed.\"),\n  OptionalChainingNoTemplate: _(\"Tagged Template Literals are not allowed in optionalChain.\"),\n  OverrideOnConstructor: _(\"'override' modifier cannot appear on a constructor declaration.\"),\n  ParamDupe: _(\"Argument name clash.\"),\n  PatternHasAccessor: _(\"Object pattern can't contain getter or setter.\"),\n  PatternHasMethod: _(\"Object pattern can't contain methods.\"),\n  PrivateInExpectedIn: _(_ref27 => {\n    let {\n      identifierName\n    } = _ref27;\n    return `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`;\n  }),\n  PrivateNameRedeclaration: _(_ref28 => {\n    let {\n      identifierName\n    } = _ref28;\n    return `Duplicate private name #${identifierName}.`;\n  }),\n  RecordExpressionBarIncorrectEndSyntaxType: _(\"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\"),\n  RecordExpressionBarIncorrectStartSyntaxType: _(\"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\"),\n  RecordExpressionHashIncorrectStartSyntaxType: _(\"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\"),\n  RecordNoProto: _(\"'__proto__' is not allowed in Record expressions.\"),\n  RestTrailingComma: _(\"Unexpected trailing comma after rest element.\"),\n  SloppyFunction: _(\"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\"),\n  StaticPrototype: _(\"Classes may not have static property named prototype.\"),\n  SuperNotAllowed: _(\"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\"),\n  SuperPrivateField: _(\"Private fields can't be accessed on super.\"),\n  TrailingDecorator: _(\"Decorators must be attached to a class element.\"),\n  TupleExpressionBarIncorrectEndSyntaxType: _(\"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\"),\n  TupleExpressionBarIncorrectStartSyntaxType: _(\"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\"),\n  TupleExpressionHashIncorrectStartSyntaxType: _(\"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\"),\n  UnexpectedArgumentPlaceholder: _(\"Unexpected argument placeholder.\"),\n  UnexpectedAwaitAfterPipelineBody: _('Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.'),\n  UnexpectedDigitAfterHash: _(\"Unexpected digit after hash token.\"),\n  UnexpectedImportExport: _(\"'import' and 'export' may only appear at the top level.\"),\n  UnexpectedKeyword: _(_ref29 => {\n    let {\n      keyword\n    } = _ref29;\n    return `Unexpected keyword '${keyword}'.`;\n  }),\n  UnexpectedLeadingDecorator: _(\"Leading decorators must be attached to a class declaration.\"),\n  UnexpectedLexicalDeclaration: _(\"Lexical declaration cannot appear in a single-statement context.\"),\n  UnexpectedNewTarget: _(\"`new.target` can only be used in functions or class properties.\"),\n  UnexpectedNumericSeparator: _(\"A numeric separator is only allowed between two digits.\"),\n  UnexpectedPrivateField: _(\"Unexpected private name.\"),\n  UnexpectedReservedWord: _(_ref30 => {\n    let {\n      reservedWord\n    } = _ref30;\n    return `Unexpected reserved word '${reservedWord}'.`;\n  }),\n  UnexpectedSuper: _(\"'super' is only allowed in object methods and classes.\"),\n  UnexpectedToken: _(_ref31 => {\n    let {\n      expected,\n      unexpected\n    } = _ref31;\n    return `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${expected ? `, expected \"${expected}\"` : \"\"}`;\n  }),\n  UnexpectedTokenUnaryExponentiation: _(\"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\"),\n  UnsupportedBind: _(\"Binding should be performed on object property.\"),\n  UnsupportedDecoratorExport: _(\"A decorated export must export a class declaration.\"),\n  UnsupportedDefaultExport: _(\"Only expressions, functions or classes are allowed as the `default` export.\"),\n  UnsupportedImport: _(\"`import` can only be used in `import()` or `import.meta`.\"),\n  UnsupportedMetaProperty: _(_ref32 => {\n    let {\n      target,\n      onlyValidPropertyName\n    } = _ref32;\n    return `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`;\n  }),\n  UnsupportedParameterDecorator: _(\"Decorators cannot be used to decorate parameters.\"),\n  UnsupportedPropertyDecorator: _(\"Decorators cannot be used to decorate object literal properties.\"),\n  UnsupportedSuper: _(\"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\"),\n  UnterminatedComment: _(\"Unterminated comment.\"),\n  UnterminatedRegExp: _(\"Unterminated regular expression.\"),\n  UnterminatedString: _(\"Unterminated string constant.\"),\n  UnterminatedTemplate: _(\"Unterminated template.\"),\n  VarRedeclaration: _(_ref33 => {\n    let {\n      identifierName\n    } = _ref33;\n    return `Identifier '${identifierName}' has already been declared.`;\n  }),\n  YieldBindingIdentifier: _(\"Can not use 'yield' as identifier inside a generator.\"),\n  YieldInParameter: _(\"Yield expression is not allowed in formal parameters.\"),\n  ZeroDigitNumericSeparator: _(\"Numeric separator can not be used after leading 0.\")\n});\n\nvar StrictModeErrors = _ => ({\n  StrictDelete: _(\"Deleting local variable in strict mode.\"),\n  StrictEvalArguments: _(_ref34 => {\n    let {\n      referenceName\n    } = _ref34;\n    return `Assigning to '${referenceName}' in strict mode.`;\n  }),\n  StrictEvalArgumentsBinding: _(_ref35 => {\n    let {\n      bindingName\n    } = _ref35;\n    return `Binding '${bindingName}' in strict mode.`;\n  }),\n  StrictFunction: _(\"In strict mode code, functions can only be declared at top level or inside a block.\"),\n  StrictNumericEscape: _(\"The only valid numeric escape in strict mode is '\\\\0'.\"),\n  StrictOctalLiteral: _(\"Legacy octal literals are not allowed in strict mode.\"),\n  StrictWith: _(\"'with' in strict mode.\")\n});\n\nconst UnparenthesizedPipeBodyDescriptions = new Set([\"ArrowFunctionExpression\", \"AssignmentExpression\", \"ConditionalExpression\", \"YieldExpression\"]);\n\nvar PipelineOperatorErrors = _ => ({\n  PipeBodyIsTighter: _(\"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\"),\n  PipeTopicRequiresHackPipes: _('Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.'),\n  PipeTopicUnbound: _(\"Topic reference is unbound; it must be inside a pipe body.\"),\n  PipeTopicUnconfiguredToken: _(_ref36 => {\n    let {\n      token\n    } = _ref36;\n    return `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`;\n  }),\n  PipeTopicUnused: _(\"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\"),\n  PipeUnparenthesizedBody: _(_ref37 => {\n    let {\n      type\n    } = _ref37;\n    return `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type\n    })}; please wrap it in parentheses.`;\n  }),\n  PipelineBodyNoArrow: _('Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.'),\n  PipelineBodySequenceExpression: _(\"Pipeline body may not be a comma-separated sequence expression.\"),\n  PipelineHeadSequenceExpression: _(\"Pipeline head should not be a comma-separated sequence expression.\"),\n  PipelineTopicUnused: _(\"Pipeline is in topic style but does not use topic reference.\"),\n  PrimaryTopicNotAllowed: _(\"Topic reference was used in a lexical context without topic binding.\"),\n  PrimaryTopicRequiresSmartPipeline: _('Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.')\n});\n\nconst _excluded$1 = [\"toMessage\"];\n\nfunction toParseErrorConstructor(_ref) {\n  let {\n    toMessage\n  } = _ref,\n      properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n  return function constructor(_ref38) {\n    let {\n      loc,\n      details\n    } = _ref38;\n    return instantiate(SyntaxError, Object.assign({}, properties, {\n      loc\n    }), {\n      clone() {\n        let overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const loc = overrides.loc || {};\n        return constructor({\n          loc: new Position(\"line\" in loc ? loc.line : this.loc.line, \"column\" in loc ? loc.column : this.loc.column, \"index\" in loc ? loc.index : this.loc.index),\n          details: Object.assign({}, this.details, overrides.details)\n        });\n      },\n\n      details: {\n        value: details,\n        enumerable: false\n      },\n      message: {\n        get() {\n          return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`;\n        },\n\n        set(value) {\n          Object.defineProperty(this, \"message\", {\n            value\n          });\n        }\n\n      },\n      pos: {\n        reflect: \"loc.index\",\n        enumerable: true\n      },\n      missingPlugin: \"missingPlugin\" in details && {\n        reflect: \"details.missingPlugin\",\n        enumerable: true\n      }\n    });\n  };\n}\n\nfunction toParseErrorCredentials(toMessageOrMessage, credentials) {\n  return Object.assign({\n    toMessage: typeof toMessageOrMessage === \"string\" ? () => toMessageOrMessage : toMessageOrMessage\n  }, credentials);\n}\n\nfunction ParseErrorEnum(argument, syntaxPlugin) {\n  if (Array.isArray(argument)) {\n    return toParseErrorCredentialsMap => ParseErrorEnum(toParseErrorCredentialsMap, argument[0]);\n  }\n\n  const partialCredentials = argument(toParseErrorCredentials);\n  const ParseErrorConstructors = {};\n\n  for (const reasonCode of Object.keys(partialCredentials)) {\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({\n      code: ParseErrorCodes.SyntaxError,\n      reasonCode\n    }, syntaxPlugin ? {\n      syntaxPlugin\n    } : {}, partialCredentials[reasonCode]));\n  }\n\n  return ParseErrorConstructors;\n}\n\nconst Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));\nconst {\n  defineProperty\n} = Object;\n\nconst toUnenumerable = (object, key) => defineProperty(object, key, {\n  enumerable: false,\n  value: object[key]\n});\n\nfunction toESTreeLocation(node) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n  return node;\n}\n\nvar estree = superClass => class extends superClass {\n  parse() {\n    const file = toESTreeLocation(super.parse());\n\n    if (this.options.tokens) {\n      file.tokens = file.tokens.map(toESTreeLocation);\n    }\n\n    return file;\n  }\n\n  parseRegExpLiteral(_ref39) {\n    let {\n      pattern,\n      flags\n    } = _ref39;\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  parseBlockBody(node) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty() {\n    const propertyNode = super.parseClassProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty() {\n    const propertyNode = super.parseClassPrivateProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isValidLVal(type) {\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      rest[_key2 - 1] = arguments[_key2];\n    }\n\n    return type === \"Property\" ? \"value\" : super.isValidLVal(type, ...rest);\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node != null && this.isObjectProperty(node)) {\n      const {\n        key,\n        value\n      } = node;\n\n      if (this.isPrivateName(key)) {\n        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n      }\n\n      this.toAssignable(value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(Errors.PatternHasAccessor, {\n        at: prop.key\n      });\n    } else if (prop.method) {\n      this.raise(Errors.PatternHasMethod, {\n        at: prop.key\n      });\n    } else {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n  finishNodeAt(node, type, endLoc) {\n    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n  }\n\n  resetEndLocation(node) {\n    let endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n    super.resetEndLocation(node, endLoc);\n    toESTreeLocation(node);\n  }\n\n};\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\n\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass ExportedTokenType {\n  constructor(label) {\n    let conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\n\nfunction createToken(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\n\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  doubleCaret: createToken(\"^^\", {\n    startsExpr\n  }),\n  doubleAt: createToken(\"@@\", {\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\n\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 128;\n}\n\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\n\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 128;\n}\n\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 132;\n}\n\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\n\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\n\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\n\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 125 && token <= 127;\n}\n\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\n\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\n\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\n\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\n\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\n\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 117 && token <= 119;\n}\n\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 120 && token <= 126;\n}\n\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\n\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\n\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\n\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\n\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n\n  tokenTypes[138].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\n\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n\n      const actualOptions = this.plugins.get(pluginName);\n\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n\n}\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 135;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(_ref40) {\n    let {\n      strictMode,\n      sourceType,\n      startLine,\n      startColumn\n    } = _ref40;\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nconst _excluded = [\"at\"],\n      _excluded2 = [\"at\"];\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = new Set([48, 49]);\nallowedNumericSeparatorSiblings.oct = new Set([...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55]);\nallowedNumericSeparatorSiblings.dec = new Set([...allowedNumericSeparatorSiblings.oct, 56, 57]);\nallowedNumericSeparatorSiblings.hex = new Set([...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102]);\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends CommentsParser {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach(_ref41 => {\n        let [toParseError, at] = _ref41;\n        return this.raise(toParseError, {\n          at\n        });\n      });\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(135);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition()\n      });\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(134, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(134, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(56, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 55 : 54;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 57;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 41 : 42, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(39, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? 43 : 45, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else if (next === 94 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"^^\"\n    }])) {\n      this.finishOp(37, 2);\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n\n      if (lookaheadCh === 94) {\n        throw this.unexpected();\n      }\n    } else {\n      this.finishOp(44, 1);\n    }\n  }\n\n  readToken_atSign() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 64 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"@@\"\n    }])) {\n      this.finishOp(38, 2);\n    } else {\n      this.finishOp(26, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(53, 1);\n    }\n  }\n\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n\n      this.finishOp(51, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n\n    this.finishOp(47, 1);\n  }\n\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n\n      this.finishOp(52, size);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n\n    this.finishOp(48, 1);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(40, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        this.readTemplateToken();\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n        this.readToken_lt();\n        return;\n\n      case 62:\n        this.readToken_gt();\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(36, 1);\n        return;\n\n      case 64:\n        this.readToken_atSign();\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code)\n    });\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === 118) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        } else if (cp === 117) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        }\n\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, {\n            at: nextPos()\n          });\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(Errors.MalformedRegExpFlags, {\n          at: nextPos()\n        });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(133, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen) {\n    let allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95 && allowNumSeparator !== \"bail\") {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition()\n          });\n        } else if (Number.isNaN(next) || !allowedSiblings.has(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition()\n          });\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(Errors.InvalidDigit, {\n            at: this.state.curPosition(),\n            radix\n          });\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix\n      });\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(Errors.InvalidDecimal, {\n        at: startLoc\n      });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(131, str);\n      return;\n    }\n\n    this.finishToken(130, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, {\n        at: this.state.curPosition()\n      });\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, {\n        at: startLoc\n      });\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos)\n          });\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, {\n          at: startLoc\n        });\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, {\n          at: startLoc\n        });\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, {\n          at: startLoc\n        });\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(131, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(132, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(130, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, {\n            at: this.state.curPosition()\n          });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(129, out);\n  }\n\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(null, 8);\n    }\n\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  readTemplateToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n    ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1)\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96) {\n        ++this.state.pos;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(24, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        this.state.pos += 2;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(25, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(toParseError, _ref42) {\n    let {\n      at\n    } = _ref42;\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, {\n        at\n      });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n            at: createPositionWithColumnOffset(this.state.curPosition(), -1)\n          });\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = createPositionWithColumnOffset(this.state.curPosition(), -1);\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n                at: codePos\n              });\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, {\n          at: codeLoc\n        });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition()\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, {\n              at: escStart\n            });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(128, word);\n    }\n  }\n\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type)\n      });\n    }\n  }\n\n  raise(toParseError, raiseProperties) {\n    const {\n      at\n    } = raiseProperties,\n          details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);\n\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({\n      loc,\n      details\n    });\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n    return error;\n  }\n\n  raiseOverwrite(toParseError, raiseProperties) {\n    const {\n      at\n    } = raiseProperties,\n          details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);\n\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n\n      if (error.loc.index === pos) {\n        return errors[i] = toParseError({\n          loc,\n          details\n        });\n      }\n\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  updateContext(prevType) {}\n\n  unexpected(loc, type) {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc\n    });\n  }\n\n  expectPlugin(pluginName, loc) {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName]\n    });\n  }\n\n  expectOnePlugin(pluginNames) {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames\n      });\n    }\n  }\n\n}\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(parser, inModule) {\n    this.parser = void 0;\n    this.scopeStack = [];\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) || !this.parser.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, loc) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, loc) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name\n      });\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.parser = parser;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name\n        });\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, loc) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, loc) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name\n      });\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.declarationErrors = new Map();\n  }\n\n  recordDeclarationError(ParsingErrorClass, _ref43) {\n    let {\n      at\n    } = _ref43;\n    const index = at.index;\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n\n  clearDeclarationError(index) {\n    this.declarationErrors.delete(index);\n  }\n\n  iterateErrors(iterator) {\n    this.declarationErrors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [new ExpressionScope()];\n    this.parser = parser;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(toParseError, _ref44) {\n    let {\n      at: node\n    } = _ref44;\n    const origin = {\n      at: node.loc.start\n    };\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.parser.raise(toParseError, origin);\n  }\n\n  recordParenthesizedIdentifierError(_ref45) {\n    let {\n      at: node\n    } = _ref45;\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n    const origin = {\n      at: node.loc.start\n    };\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(Errors.InvalidParenthesizedAssignment, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(Errors.InvalidParenthesizedAssignment, origin);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(_ref46) {\n    let {\n      at\n    } = _ref46;\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {\n          at\n        });\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(_ref47 => {\n      let [toParseError, loc] = _ref47;\n      this.parser.raise(toParseError, {\n        at: loc\n      });\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, value) {\n    let enumerable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, {\n        enumerable,\n        value\n      });\n    }\n  }\n\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  expectContextual(token, toParseError) {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, {\n          at: this.state.startLoc\n        });\n      }\n\n      throw this.unexpected(null, token);\n    }\n  }\n\n  canInsertSemicolon() {\n    return this.match(135) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    let allowAsi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(Errors.MissingSemicolon, {\n      at: this.state.lastTokEndLoc\n    });\n  }\n\n  expect(type, loc) {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  tryParse(fn) {\n    let oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn(function () {\n        let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc\n    } = refExpressionErrors;\n    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, {\n        at: doubleProtoLoc\n      });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, {\n        at: privateKeyLoc\n      });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes() {\n    let inModule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.sourceType === \"module\";\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors) {\n    const {\n      privateKeyLoc\n    } = refExpressionErrors;\n\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssignLoc = null;\n    this.doubleProtoLoc = null;\n    this.privateKeyLoc = null;\n    this.optionalParametersLoc = null;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\n\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n\n  cloned.value = node.value;\n  return cloned;\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, endLoc) {\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node) {\n    let endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = ParseErrorEnum`flow`(_ => ({\n  AmbiguousConditionalArrow: _(\"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\"),\n  AmbiguousDeclareModuleKind: _(\"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\"),\n  AssignReservedType: _(_ref48 => {\n    let {\n      reservedType\n    } = _ref48;\n    return `Cannot overwrite reserved type ${reservedType}.`;\n  }),\n  DeclareClassElement: _(\"The `declare` modifier can only appear on class fields.\"),\n  DeclareClassFieldInitializer: _(\"Initializers are not allowed in fields with the `declare` modifier.\"),\n  DuplicateDeclareModuleExports: _(\"Duplicate `declare module.exports` statement.\"),\n  EnumBooleanMemberNotInitialized: _(_ref49 => {\n    let {\n      memberName,\n      enumName\n    } = _ref49;\n    return `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`;\n  }),\n  EnumDuplicateMemberName: _(_ref50 => {\n    let {\n      memberName,\n      enumName\n    } = _ref50;\n    return `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`;\n  }),\n  EnumInconsistentMemberValues: _(_ref51 => {\n    let {\n      enumName\n    } = _ref51;\n    return `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`;\n  }),\n  EnumInvalidExplicitType: _(_ref52 => {\n    let {\n      invalidEnumType,\n      enumName\n    } = _ref52;\n    return `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`;\n  }),\n  EnumInvalidExplicitTypeUnknownSupplied: _(_ref53 => {\n    let {\n      enumName\n    } = _ref53;\n    return `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`;\n  }),\n  EnumInvalidMemberInitializerPrimaryType: _(_ref54 => {\n    let {\n      enumName,\n      memberName,\n      explicitType\n    } = _ref54;\n    return `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`;\n  }),\n  EnumInvalidMemberInitializerSymbolType: _(_ref55 => {\n    let {\n      enumName,\n      memberName\n    } = _ref55;\n    return `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`;\n  }),\n  EnumInvalidMemberInitializerUnknownType: _(_ref56 => {\n    let {\n      enumName,\n      memberName\n    } = _ref56;\n    return `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`;\n  }),\n  EnumInvalidMemberName: _(_ref57 => {\n    let {\n      enumName,\n      memberName,\n      suggestion\n    } = _ref57;\n    return `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`;\n  }),\n  EnumNumberMemberNotInitialized: _(_ref58 => {\n    let {\n      enumName,\n      memberName\n    } = _ref58;\n    return `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`;\n  }),\n  EnumStringMemberInconsistentlyInitailized: _(_ref59 => {\n    let {\n      enumName\n    } = _ref59;\n    return `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`;\n  }),\n  GetterMayNotHaveThisParam: _(\"A getter cannot have a `this` parameter.\"),\n  ImportTypeShorthandOnlyInPureImport: _(\"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\"),\n  InexactInsideExact: _(\"Explicit inexact syntax cannot appear inside an explicit exact object type.\"),\n  InexactInsideNonObject: _(\"Explicit inexact syntax cannot appear in class or interface definitions.\"),\n  InexactVariance: _(\"Explicit inexact syntax cannot have variance.\"),\n  InvalidNonTypeImportInDeclareModule: _(\"Imports within a `declare module` body must always be `import type` or `import typeof`.\"),\n  MissingTypeParamDefault: _(\"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\"),\n  NestedDeclareModule: _(\"`declare module` cannot be used inside another `declare module`.\"),\n  NestedFlowComment: _(\"Cannot have a flow comment inside another flow comment.\"),\n  PatternIsOptional: _(\"A binding pattern parameter cannot be optional in an implementation signature.\", {\n    reasonCode: \"OptionalBindingPattern\"\n  }),\n  SetterMayNotHaveThisParam: _(\"A setter cannot have a `this` parameter.\"),\n  SpreadVariance: _(\"Spread properties cannot have variance.\"),\n  ThisParamAnnotationRequired: _(\"A type annotation is required for the `this` parameter.\"),\n  ThisParamBannedInConstructor: _(\"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\"),\n  ThisParamMayNotBeOptional: _(\"The `this` parameter cannot be optional.\"),\n  ThisParamMustBeFirst: _(\"The `this` parameter must be the first function parameter.\"),\n  ThisParamNoDefault: _(\"The `this` parameter may not have a default value.\"),\n  TypeBeforeInitializer: _(\"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\"),\n  TypeCastInPattern: _(\"The type cast expression is expected to be wrapped with parenthesis.\"),\n  UnexpectedExplicitInexactInObject: _(\"Explicit inexact syntax must appear at the end of an inexact object.\"),\n  UnexpectedReservedType: _(_ref60 => {\n    let {\n      reservedType\n    } = _ref60;\n    return `Unexpected reserved type ${reservedType}.`;\n  }),\n  UnexpectedReservedUnderscore: _(\"`_` is only allowed as a type argument to call or new.\"),\n  UnexpectedSpaceBetweenModuloChecks: _(\"Spaces between `%` and `checks` are not allowed here.\"),\n  UnexpectedSpreadType: _(\"Spread operator cannot appear in class or interface definitions.\"),\n  UnexpectedSubtractionOperand: _('Unexpected token, expected \"number\" or \"bigint\".'),\n  UnexpectedTokenAfterTypeParameter: _(\"Expected an arrow function after this type parameter declaration.\"),\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: _(\"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\"),\n  UnsupportedDeclareExportKind: _(_ref61 => {\n    let {\n      unsupportedExportKind,\n      suggestion\n    } = _ref61;\n    return `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`;\n  }),\n  UnsupportedStatementInDeclareModule: _(\"Only declares and type imports are allowed inside declare module.\"),\n  UnterminatedFlowComment: _(\"Unterminated flow-comment.\")\n}));\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type) {\n  return tokenIsKeywordOrIdentifier(type) && type !== 97;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor() {\n    super(...arguments);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== 129 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    this.next();\n    this.expectContextual(107);\n\n    if (this.state.lastTokStart > moduloLoc.index + 1) {\n      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n        at: moduloLoc\n      });\n    }\n\n    if (this.eat(10)) {\n      node.value = this.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(54)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(54)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.match(47)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(80)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(68)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(74)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(123)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(FlowErrors.NestedDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(126)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(127)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(125)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(82)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(129)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(83)) {\n        this.next();\n\n        if (!this.isContextual(126) && !this.match(87)) {\n          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(121, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            at: bodyElement\n          });\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n            at: bodyElement\n          });\n        }\n\n        if (kind === \"ES\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            at: bodyElement\n          });\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(82);\n\n    if (this.eat(65)) {\n      if (this.match(68) || this.match(80)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(75) || this.isLet() || (this.isContextual(126) || this.isContextual(125)) && !insideModule) {\n        const label = this.state.value;\n        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n          at: this.state.startLoc,\n          unsupportedExportKind: label,\n          suggestion: exportSuggestions[label]\n        });\n      }\n\n      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(127)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(55) || this.match(5) || this.isContextual(125) || this.isContextual(126) || this.isContextual(127)) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(108);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node) {\n    let isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n\n    if (this.isContextual(114)) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n        at: this.state.startLoc\n      });\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {\n      at: startLoc,\n      reservedType: word\n    });\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(126);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter() {\n    let requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const nodeStartLoc = this.state.startLoc;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(FlowErrors.MissingTypeParamDefault, {\n          at: nodeStartLoc\n        });\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.match(47) || this.match(138)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    } while (!this.match(48));\n\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.match(48)) {\n      node.params.push(this.flowParseType());\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n\n    while (!this.match(48)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(125);\n    node.extends = [];\n\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(130) || this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n\n    if (this.match(47) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(10);\n\n    if (this.match(78)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType(_ref62) {\n    let {\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    } = _ref62;\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStartLoc = null;\n      let inexactStartLoc = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(115)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStartLoc = this.state.startLoc;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(104)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(0)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(47)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(98) || this.isContextual(103)) {\n          const lookahead = this.lookahead();\n\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStartLoc = this.state.lastTokStartLoc;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n          at: inexactStartLoc\n        });\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(FlowErrors.InexactInsideNonObject, {\n            at: this.state.lastTokStartLoc\n          });\n        } else if (!allowInexact) {\n          this.raise(FlowErrors.InexactInsideExact, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        if (variance) {\n          this.raise(FlowErrors.InexactVariance, {\n            at: variance\n          });\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(FlowErrors.UnexpectedSpreadType, {\n          at: this.state.lastTokStartLoc\n        });\n      }\n\n      if (protoStartLoc != null) {\n        this.unexpected(protoStartLoc);\n      }\n\n      if (variance) {\n        this.raise(FlowErrors.SpreadVariance, {\n          at: variance\n        });\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStartLoc != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.match(47) || this.match(10)) {\n        node.method = true;\n\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, {\n            at: node.value.this\n          });\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(17)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {\n        at: property.value.this\n      });\n    }\n\n    if (length !== paramCount) {\n      this.raise(property.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n        at: property\n      });\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(Errors.BadSetterRestParameter, {\n        at: property\n      });\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(87);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 78;\n\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          at: node\n        });\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(17)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n            at: node\n          });\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let rest = null;\n    let _this = null;\n\n    if (this.match(78)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case 47:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 10:\n        this.next();\n\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 129:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case 85:\n      case 86:\n        node.value = this.match(85);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case 53:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(130)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(131)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n            at: this.state.startLoc\n          });\n        }\n\n        throw this.unexpected();\n\n      case 130:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case 131:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case 88:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case 84:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case 78:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case 55:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      case 87:\n        return this.flowParseTypeofType();\n\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(125)) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(45);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(45)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(43)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 128 && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(53)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.isContextual(125)) {\n      const lookahead = this.lookahead();\n\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(122)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {\n      return !this.state.containsEsc;\n    }\n\n    return super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {\n      return this.state.containsEsc;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(122)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(FlowErrors.AmbiguousConditionalArrow, {\n          at: state.startLoc\n        });\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(126)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(127)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(125)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(122)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(126) && this.lookahead().type === 55) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const {\n      startLoc\n    } = this.state;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(startLoc);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const {\n      startLoc\n    } = this.state;\n\n    if (this.isContextual(121)) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(FlowErrors.DeclareClassElement, {\n          at: startLoc\n        });\n      } else if (member.value) {\n        this.raise(FlowErrors.DeclareClassFieldInitializer, {\n          at: member.value\n        });\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(Errors.InvalidIdentifier, {\n        at: this.state.curPosition(),\n        identifierName: fullWord\n      });\n    }\n\n    this.finishToken(128, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(code === 62 ? 48 : 47, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(18, 2);\n      }\n\n      return this.finishOp(17, 1);\n    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(FlowErrors.TypeCastInPattern, {\n          at: expr.typeAnnotation\n        });\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  isValidLVal(type) {\n    for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      rest[_key4 - 1] = arguments[_key4];\n    }\n\n    return type === \"TypeCastExpression\" || super.isValidLVal(type, ...rest);\n  }\n\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          at: method\n        });\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          at: method\n        });\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(47)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(FlowErrors.GetterMayNotHaveThisParam, {\n          at: param\n        });\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.SetterMayNotHaveThisParam, {\n          at: param\n        });\n      }\n    }\n  }\n\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.loc.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.match(47) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(FlowErrors.PatternIsOptional, {\n          at: param\n        });\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n          at: param\n        });\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamAnnotationRequired, {\n        at: param\n      });\n    }\n\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamNoDefault, {\n        at: param\n      });\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(FlowErrors.TypeBeforeInitializer, {\n        at: node.typeAnnotation\n      });\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(87)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(126)) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n      const {\n        type\n      } = lh;\n\n      if (kind === \"type\" && type === 55) {\n        this.unexpected(null, lh.type);\n      }\n\n      if (isMaybeDefaultImport(type) || type === 5 || type === 55) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(93) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(Errors.ImportBindingIsString, {\n            at: specifier,\n            importName: firstIdent.value\n          });\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n        at: specifier\n      });\n    }\n\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n    }\n\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n    }\n\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(138) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {\n              at: typeParameters\n            });\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n        at: typeParameters\n      });\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          at: node.params[i]\n        });\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(47)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = this.parseCallExpressionArguments(11, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.match(47)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(FlowErrors.UnterminatedFlowComment, {\n        at: this.state.curPosition()\n      });\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        throw this.raise(FlowErrors.NestedFlowComment, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.state.pos = end + 2 + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(loc, _ref63) {\n    let {\n      enumName,\n      memberName\n    } = _ref63;\n    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n      at: loc,\n      memberName,\n      enumName\n    });\n  }\n\n  flowEnumErrorInvalidMemberInitializer(loc, enumContext) {\n    return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === \"symbol\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({\n      at: loc\n    }, enumContext));\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(loc, _ref64) {\n    let {\n      enumName,\n      memberName\n    } = _ref64;\n    this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n      at: loc,\n      enumName,\n      memberName\n    });\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(node, _ref65) {\n    let {\n      enumName\n    } = _ref65;\n    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n      at: node,\n      enumName\n    });\n  }\n\n  flowEnumMemberInit() {\n    const startLoc = this.state.startLoc;\n\n    const endOfInit = () => this.match(12) || this.match(8);\n\n    switch (this.state.type) {\n      case 130:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      case 129:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      case 85:\n      case 86:\n        {\n          const literal = this.parseBooleanLiteral(this.match(85));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          loc: startLoc\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const loc = this.state.startLoc;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      loc\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(loc, context);\n    }\n  }\n\n  flowEnumMembers(_ref66) {\n    let {\n      enumName,\n      explicitType\n    } = _ref66;\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.raise(FlowErrors.EnumInvalidMemberName, {\n          at: id,\n          memberName,\n          suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n          enumName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.raise(FlowErrors.EnumDuplicateMemberName, {\n          at: id,\n          memberName,\n          enumName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, _ref67) {\n    let {\n      enumName\n    } = _ref67;\n\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType(_ref68) {\n    let {\n      enumName\n    } = _ref68;\n    if (!this.eatContextual(101)) return null;\n\n    if (!tokenIsIdentifier(this.state.type)) {\n      throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n        at: this.state.startLoc,\n        enumName\n      });\n    }\n\n    const {\n      value\n    } = this.state;\n    this.next();\n\n    if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n      this.raise(FlowErrors.EnumInvalidExplicitType, {\n        at: this.state.startLoc,\n        enumName,\n        invalidEnumType: value\n      });\n    }\n\n    return value;\n  }\n\n  flowEnumBody(node, id) {\n    const enumName = id.name;\n    const nameLoc = id.loc.start;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), id);\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst JsxErrors = ParseErrorEnum`jsx`(_ => ({\n  AttributeIsEmpty: _(\"JSX attributes must only be assigned a non-empty expression.\"),\n  MissingClosingTagElement: _(_ref69 => {\n    let {\n      openingTagName\n    } = _ref69;\n    return `Expected corresponding JSX closing tag for <${openingTagName}>.`;\n  }),\n  MissingClosingTagFragment: _(\"Expected corresponding JSX closing tag for <>.\"),\n  UnexpectedSequenceExpression: _(\"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\"),\n  UnexpectedToken: _(_ref70 => {\n    let {\n      unexpected,\n      HTMLEntity\n    } = _ref70;\n    return `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`;\n  }),\n  UnsupportedJsxValue: _(\"JSX value should be either an expression or a quoted JSX text.\"),\n  UnterminatedJsxContent: _(\"Unterminated JSX contents.\"),\n  UnwrappedAdjacentJSXElements: _(\"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\")\n}));\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(JsxErrors.UnterminatedJsxContent, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              return this.finishToken(138);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(137, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(129, out);\n  }\n\n  jsxReadEntity() {\n    const startPos = ++this.state.pos;\n\n    if (this.codePointAtPos(this.state.pos) === 35) {\n      ++this.state.pos;\n      let radix = 10;\n\n      if (this.codePointAtPos(this.state.pos) === 120) {\n        radix = 16;\n        ++this.state.pos;\n      }\n\n      const codePoint = this.readInt(radix, undefined, false, \"bail\");\n\n      if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {\n        ++this.state.pos;\n        return String.fromCodePoint(codePoint);\n      }\n    } else {\n      let count = 0;\n      let semi = false;\n\n      while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {\n        ++this.state.pos;\n      }\n\n      if (semi) {\n        const desc = this.input.slice(startPos, this.state.pos);\n        const entity = entities[desc];\n        ++this.state.pos;\n\n        if (entity) {\n          return entity;\n        }\n      }\n    }\n\n    this.state.pos = startPos;\n    return \"&\";\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(136, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(136)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(JsxErrors.AttributeIsEmpty, {\n            at: node\n          });\n        }\n\n        return node;\n\n      case 138:\n      case 129:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(JsxErrors.UnsupportedJsxValue, {\n          at: this.state.startLoc\n        });\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEndLoc.index, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_oTag);\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.setContext(previousContext);\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(139)) {\n      this.expect(139);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(56) && !this.match(139)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(56);\n    this.expect(139);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(139)) {\n      this.expect(139);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(139);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 138:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(56)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case 137:\n            children.push(this.parseExprAtom());\n            break;\n\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n        this.raise(JsxErrors.MissingClosingTagFragment, {\n          at: closingElement\n        });\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(JsxErrors.MissingClosingTagElement, {\n          at: closingElement,\n          openingTagName: getQualifiedJSXName(openingElement.name)\n        });\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name)\n          });\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.match(47)) {\n      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n        at: this.state.startLoc\n      });\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(137)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(138)) {\n      return this.jsxParseElement();\n    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(138);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n\n  getTokenFromCode(code) {\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(139);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(138);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === 56 && prevType === 138) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 138) {\n      context.push(types.j_oTag);\n    } else if (type === 139) {\n      const out = context[context.length - 1];\n\n      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst getOwn$1 = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = ParseErrorEnum`typescript`(_ => ({\n  AbstractMethodHasImplementation: _(_ref71 => {\n    let {\n      methodName\n    } = _ref71;\n    return `Method '${methodName}' cannot have an implementation because it is marked abstract.`;\n  }),\n  AbstractPropertyHasInitializer: _(_ref72 => {\n    let {\n      propertyName\n    } = _ref72;\n    return `Property '${propertyName}' cannot have an initializer because it is marked abstract.`;\n  }),\n  AccesorCannotDeclareThisParameter: _(\"'get' and 'set' accessors cannot declare 'this' parameters.\"),\n  AccesorCannotHaveTypeParameters: _(\"An accessor cannot have type parameters.\"),\n  CannotFindName: _(_ref73 => {\n    let {\n      name\n    } = _ref73;\n    return `Cannot find name '${name}'.`;\n  }),\n  ClassMethodHasDeclare: _(\"Class methods cannot have the 'declare' modifier.\"),\n  ClassMethodHasReadonly: _(\"Class methods cannot have the 'readonly' modifier.\"),\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: _(\"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\"),\n  ConstructorHasTypeParameters: _(\"Type parameters cannot appear on a constructor declaration.\"),\n  DeclareAccessor: _(_ref74 => {\n    let {\n      kind\n    } = _ref74;\n    return `'declare' is not allowed in ${kind}ters.`;\n  }),\n  DeclareClassFieldHasInitializer: _(\"Initializers are not allowed in ambient contexts.\"),\n  DeclareFunctionHasImplementation: _(\"An implementation cannot be declared in ambient contexts.\"),\n  DuplicateAccessibilityModifier: _(_ref75 => {\n    let {\n      modifier\n    } = _ref75;\n    return `Accessibility modifier already seen.`;\n  }),\n  DuplicateModifier: _(_ref76 => {\n    let {\n      modifier\n    } = _ref76;\n    return `Duplicate modifier: '${modifier}'.`;\n  }),\n  EmptyHeritageClauseType: _(_ref77 => {\n    let {\n      token\n    } = _ref77;\n    return `'${token}' list cannot be empty.`;\n  }),\n  EmptyTypeArguments: _(\"Type argument list cannot be empty.\"),\n  EmptyTypeParameters: _(\"Type parameter list cannot be empty.\"),\n  ExpectedAmbientAfterExportDeclare: _(\"'export declare' must be followed by an ambient declaration.\"),\n  ImportAliasHasImportType: _(\"An import alias can not use 'import type'.\"),\n  IncompatibleModifiers: _(_ref78 => {\n    let {\n      modifiers\n    } = _ref78;\n    return `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`;\n  }),\n  IndexSignatureHasAbstract: _(\"Index signatures cannot have the 'abstract' modifier.\"),\n  IndexSignatureHasAccessibility: _(_ref79 => {\n    let {\n      modifier\n    } = _ref79;\n    return `Index signatures cannot have an accessibility modifier ('${modifier}').`;\n  }),\n  IndexSignatureHasDeclare: _(\"Index signatures cannot have the 'declare' modifier.\"),\n  IndexSignatureHasOverride: _(\"'override' modifier cannot appear on an index signature.\"),\n  IndexSignatureHasStatic: _(\"Index signatures cannot have the 'static' modifier.\"),\n  InitializerNotAllowedInAmbientContext: _(\"Initializers are not allowed in ambient contexts.\"),\n  InvalidModifierOnTypeMember: _(_ref80 => {\n    let {\n      modifier\n    } = _ref80;\n    return `'${modifier}' modifier cannot appear on a type member.`;\n  }),\n  InvalidModifiersOrder: _(_ref81 => {\n    let {\n      orderedModifiers\n    } = _ref81;\n    return `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`;\n  }),\n  InvalidTupleMemberLabel: _(\"Tuple members must be labeled with a simple identifier.\"),\n  MissingInterfaceName: _(\"'interface' declarations must be followed by an identifier.\"),\n  MixedLabeledAndUnlabeledElements: _(\"Tuple members must all have names or all not have names.\"),\n  NonAbstractClassHasAbstractMethod: _(\"Abstract methods can only appear within an abstract class.\"),\n  NonClassMethodPropertyHasAbstractModifer: _(\"'abstract' modifier can only appear on a class, method, or property declaration.\"),\n  OptionalTypeBeforeRequired: _(\"A required element cannot follow an optional element.\"),\n  OverrideNotInSubClass: _(\"This member cannot have an 'override' modifier because its containing class does not extend another class.\"),\n  PatternIsOptional: _(\"A binding pattern parameter cannot be optional in an implementation signature.\"),\n  PrivateElementHasAbstract: _(\"Private elements cannot have the 'abstract' modifier.\"),\n  PrivateElementHasAccessibility: _(_ref82 => {\n    let {\n      modifier\n    } = _ref82;\n    return `Private elements cannot have an accessibility modifier ('${modifier}').`;\n  }),\n  ReadonlyForMethodSignature: _(\"'readonly' modifier can only appear on a property declaration or index signature.\"),\n  ReservedArrowTypeParam: _(\"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\"),\n  ReservedTypeAssertion: _(\"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\"),\n  SetAccesorCannotHaveOptionalParameter: _(\"A 'set' accessor cannot have an optional parameter.\"),\n  SetAccesorCannotHaveRestParameter: _(\"A 'set' accessor cannot have rest parameter.\"),\n  SetAccesorCannotHaveReturnType: _(\"A 'set' accessor cannot have a return type annotation.\"),\n  SingleTypeParameterWithoutTrailingComma: _(_ref83 => {\n    let {\n      typeParameterName\n    } = _ref83;\n    return `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`;\n  }),\n  StaticBlockCannotHaveModifier: _(\"Static class blocks cannot have any modifier.\"),\n  TypeAnnotationAfterAssign: _(\"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\"),\n  TypeImportCannotSpecifyDefaultAndNamed: _(\"A type-only import can specify a default import or named bindings, but not both.\"),\n  TypeModifierIsUsedInTypeExports: _(\"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\"),\n  TypeModifierIsUsedInTypeImports: _(\"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\"),\n  UnexpectedParameterModifier: _(\"A parameter property is only allowed in a constructor implementation.\"),\n  UnexpectedReadonly: _(\"'readonly' type modifier is only permitted on array and tuple literal types.\"),\n  UnexpectedTypeAnnotation: _(\"Did not expect a type annotation here.\"),\n  UnexpectedTypeCastInParameter: _(\"Unexpected type cast in parameter position.\"),\n  UnsupportedImportTypeArgument: _(\"Argument in a type import must be a string literal.\"),\n  UnsupportedParameterPropertyKind: _(\"A parameter property may not be declared using a binding pattern.\"),\n  UnsupportedSignatureParameterKind: _(_ref84 => {\n    let {\n      type\n    } = _ref84;\n    return `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`;\n  })\n}));\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(134) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(_ref85) {\n    let {\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock\n    } = _ref85;\n\n    const enforceOrder = (loc, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(TSErrors.InvalidModifiersOrder, {\n          at: loc,\n          orderedModifiers: [before, after]\n        });\n      }\n    };\n\n    const incompatible = (loc, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(TSErrors.IncompatibleModifiers, {\n          at: loc,\n          modifiers: [mod1, mod2]\n        });\n      }\n    };\n\n    for (;;) {\n      const {\n        startLoc\n      } = this.state;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(TSErrors.DuplicateAccessibilityModifier, {\n            at: startLoc,\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, modifier, \"override\");\n          enforceOrder(startLoc, modifier, modifier, \"static\");\n          enforceOrder(startLoc, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(TSErrors.DuplicateModifier, {\n            at: startLoc,\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"static\", \"override\");\n          enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n          incompatible(startLoc, modifier, \"declare\", \"override\");\n          incompatible(startLoc, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(TSErrors.InvalidModifierOnTypeMember, {\n          at: startLoc,\n          modifier\n        });\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n\n      case \"HeritageClauseElement\":\n        return this.match(5);\n\n      case \"TupleElementTypes\":\n        return this.match(3);\n\n      case \"TypeParametersOrArguments\":\n        return this.match(48);\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      trailingCommaPos = -1;\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStart;\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(12);\n      }\n\n      return undefined;\n    }\n\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(47);\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(48);\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(83);\n    this.expect(10);\n\n    if (!this.match(129)) {\n      this.raise(TSErrors.UnsupportedImportTypeArgument, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(11);\n\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName();\n    }\n\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName() {\n    let allowReservedWords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let entity = this.parseIdentifier(allowReservedWords);\n\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName();\n\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(87);\n\n    if (this.match(83)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName();\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(81);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.match(47)) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.match(47) || this.match(138)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true, refTrailingCommaPos);\n\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeParameters, {\n        at: node\n      });\n    }\n\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type !== 75) return null;\n    this.next();\n    const typeReference = this.tsParseTypeReference();\n\n    if (typeReference.typeParameters) {\n      this.raise(TSErrors.CannotFindName, {\n        at: typeReference.typeName,\n        name: \"const\"\n      });\n    }\n\n    return typeReference;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    const paramsKey = \"parameters\";\n    const returnTypeKey = \"typeAnnotation\";\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(10);\n    signature[paramsKey] = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(11, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n          at: pattern,\n          type: pattern.type\n        });\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n\n    return false;\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(10) || this.match(47)) {\n      if (readonly) {\n        this.raise(TSErrors.ReadonlyForMethodSignature, {\n          at: node\n        });\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.match(47)) {\n        this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n      const paramsKey = \"parameters\";\n      const returnTypeKey = \"typeAnnotation\";\n\n      if (method.kind === \"get\") {\n        if (method[paramsKey].length > 0) {\n          this.raise(Errors.BadGetterArity, {\n            at: this.state.curPosition()\n          });\n\n          if (this.isThisParam(method[paramsKey][0])) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method[paramsKey].length !== 1) {\n          this.raise(Errors.BadSetterArity, {\n            at: this.state.curPosition()\n          });\n        } else {\n          const firstParameter = method[paramsKey][0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n              at: this.state.curPosition()\n            });\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n\n        if (method[returnTypeKey]) {\n          this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n            at: method[returnTypeKey]\n          });\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(10) || this.match(47)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(77)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(10) || this.match(47)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers({\n      modified: node,\n      allowedModifiers: [\"readonly\"],\n      disallowedModifiers: [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"]\n    });\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(53)) {\n      return this.isContextual(118);\n    }\n\n    if (this.isContextual(118)) {\n      this.next();\n    }\n\n    if (!this.match(0)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(58);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(58);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n\n    if (this.match(53)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(118);\n    } else if (this.eatContextual(118)) {\n      node.readonly = true;\n    }\n\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n    this.expect(3);\n\n    if (this.match(53)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(TSErrors.OptionalTypeBeforeRequired, {\n          at: elementNode\n        });\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n          at: elementNode\n        });\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let type = this.tsParseType();\n    const optional = this.eat(17);\n    const labeled = this.eat(14);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(TSErrors.InvalidTupleMemberLabel, {\n          at: type\n        });\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(19, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case 130:\n        case 131:\n        case 129:\n        case 85:\n        case 86:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 129:\n      case 130:\n      case 131:\n      case 85:\n      case 86:\n        return this.tsParseLiteralTypeNode();\n\n      case 53:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== 130 && nextToken.type !== 131) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case 78:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case 87:\n        return this.tsParseTypeQuery();\n\n      case 83:\n        return this.tsParseImportType();\n\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case 0:\n        return this.tsParseTupleType();\n\n      case 10:\n        return this.tsParseParenthesizedType();\n\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n\n      default:\n        {\n          const {\n            type\n          } = this.state;\n\n          if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n            const nodeType = type === 88 ? \"TSVoidKeyword\" : type === 84 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(TSErrors.UnexpectedReadonly, {\n          at: node\n        });\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(112);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(112) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.match(47)) {\n      return true;\n    }\n\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(5)) {\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n\n      try {\n        this.parseObjectLike(8, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused) {\n        return false;\n      }\n    }\n\n    if (this.match(0)) {\n      this.next();\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n\n      try {\n        this.parseBindingList(3, 93, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused2) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n\n      if (this.match(11)) {\n        this.next();\n\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(78)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(14) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 106) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.lastTokStartLoc,\n        reservedWord: \"asserts\"\n      });\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation() {\n    let eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(81)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(17);\n    node.trueType = this.tsParseType();\n    this.expect(14);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(120) && this.lookahead().type === 77;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(77)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedTypeAssertion, {\n        at: this.state.startLoc\n      });\n    }\n\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expect(48);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(token) {\n    const originalStartLoc = this.state.startLoc;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(TSErrors.EmptyHeritageClauseType, {\n        at: originalStartLoc,\n        token\n      });\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName();\n\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    let properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (this.hasFollowingLineBreak()) return null;\n    this.expectContextual(125);\n    if (properties.declare) node.declare = true;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(TSErrors.MissingInterfaceName, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(81)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(29);\n\n      if (this.isContextual(111) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(29)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node) {\n    let properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (properties.const) node.const = true;\n    if (properties.declare) node.declare = true;\n    this.expectContextual(122);\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(5);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node) {\n    let nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(109)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(129)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(5)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, BIND_LEXICAL);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(TSErrors.ImportAliasHasImportType, {\n        at: moduleReference\n      });\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(116) && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(116);\n    this.expect(10);\n\n    if (!this.match(129)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(11);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(99)) {\n      starttype = 74;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      if (starttype === 68) {\n        nany.declare = true;\n        return this.parseFunctionStatement(nany, false, true);\n      }\n\n      if (starttype === 80) {\n        nany.declare = true;\n        return this.parseClass(nany, true, false);\n      }\n\n      if (starttype === 122) {\n        return this.tsParseEnumDeclaration(nany, {\n          declare: true\n        });\n      }\n\n      if (starttype === 109) {\n        return this.tsParseAmbientExternalModuleDeclaration(nany);\n      }\n\n      if (starttype === 75 || starttype === 74) {\n        if (!this.match(75) || !this.isLookaheadContextual(\"enum\")) {\n          nany.declare = true;\n          return this.parseVarStatement(nany, kind || this.state.value, true);\n        }\n\n        this.expect(75);\n        return this.tsParseEnumDeclaration(nany, {\n          const: true,\n          declare: true\n        });\n      }\n\n      if (starttype === 125) {\n        const result = this.tsParseInterfaceDeclaration(nany, {\n          declare: true\n        });\n        if (result) return result;\n      }\n\n      if (tokenIsIdentifier(starttype)) {\n        return this.tsParseDeclaration(nany, this.state.value, true);\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(129)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.match(47)) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArgumentsInExpression() {\n    if (this.reScan_lt() !== 47) {\n      return undefined;\n    }\n\n    return this.tsParseTypeArguments();\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(47);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeArguments, {\n        at: node\n      });\n    }\n\n    this.expect(48);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers({\n        modified,\n        allowedModifiers: [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]\n      });\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(TSErrors.UnexpectedParameterModifier, {\n          at: startLoc\n        });\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(TSErrors.UnsupportedParameterPropertyKind, {\n          at: pp\n        });\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  isSimpleParameter(node) {\n    return node.type === \"TSParameterProperty\" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(TSErrors.DeclareFunctionHasImplementation, {\n        at: node\n      });\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(TSErrors.UnexpectedTypeAnnotation, {\n          at: node.typeAnnotation\n        });\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike() {\n    const node = super.parseArrayLike(...arguments);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.match(47) || this.match(51)) {\n      let missingParenErrorLoc;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(10)) {\n            missingParenErrorLoc = this.state.curPosition();\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(10)) {\n            node.arguments = this.parseCallExpressionArguments(11, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (tokenIsTemplate(this.state.type)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorLoc) {\n        this.unexpected(missingParenErrorLoc, 10);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArgumentsInExpression();\n        if (!this.match(10)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(93)) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (!this.state.isAmbientContext) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(126) && ahead.type !== 12 && ahead.type !== 97 && ahead.type !== 29) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n        at: importNode\n      });\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(83)) {\n      this.next();\n\n      if (this.isContextual(126) && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(93)) {\n      const decl = node;\n      this.expectContextual(124);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(126) && this.lookahead().type === 5) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(120) && this.lookahead().type === 80;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.match(125)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseVarStatement(node, kind) {\n    let allowMissingInitializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const {\n      isAmbientContext\n    } = this.state;\n    const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);\n    if (!isAmbientContext) return declaration;\n\n    for (const {\n      id,\n      init\n    } of declaration.declarations) {\n      if (!init) continue;\n\n      if (kind !== \"const\" || !!id.typeAnnotation) {\n        this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n          at: init\n        });\n      } else if (init.type !== \"StringLiteral\" && init.type !== \"BooleanLiteral\" && init.type !== \"NumericLiteral\" && init.type !== \"BigIntLiteral\" && (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) && !isPossiblyLiteralEnum(init)) {\n        this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {\n          at: init\n        });\n      }\n    }\n\n    return declaration;\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.match(75) && this.isLookaheadContextual(\"enum\")) {\n      const node = this.startNode();\n      this.expect(75);\n      return this.tsParseEnumDeclaration(node, {\n        const: true\n      });\n    }\n\n    if (this.isContextual(122)) {\n      return this.tsParseEnumDeclaration(this.startNode());\n    }\n\n    if (this.isContextual(125)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(104) && this.lookaheadCharCode() === 123;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers({\n      modified: member,\n      allowedModifiers: modifiers,\n      stopOnStartOfClassStaticBlock: true\n    });\n\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(TSErrors.IndexSignatureHasAbstract, {\n          at: member\n        });\n      }\n\n      if (member.accessibility) {\n        this.raise(TSErrors.IndexSignatureHasAccessibility, {\n          at: member,\n          modifier: member.accessibility\n        });\n      }\n\n      if (member.declare) {\n        this.raise(TSErrors.IndexSignatureHasDeclare, {\n          at: member\n        });\n      }\n\n      if (member.override) {\n        this.raise(TSErrors.IndexSignatureHasOverride, {\n          at: member\n        });\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n        at: member\n      });\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(TSErrors.OverrideNotInSubClass, {\n          at: member\n        });\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasReadonly, {\n        at: methodOrProp\n      });\n    }\n\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasDeclare, {\n        at: methodOrProp\n      });\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    if (!this.state.isAmbientContext && this.isContextual(121)) {\n      return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(121);\n\n    if (isDeclare && (this.isContextual(121) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n        at: this.state.startLoc\n      });\n    }\n\n    const isIdentifier = tokenIsIdentifier(this.state.type);\n    const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);\n    if (!declaration) return null;\n\n    if (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare) {\n      node.exportKind = \"type\";\n    }\n\n    if (isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(110)) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(35)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(29)) {\n      this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(TSErrors.AbstractPropertyHasInitializer, {\n        at: this.state.startLoc,\n        propertyName: key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n      });\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(TSErrors.PrivateElementHasAbstract, {\n        at: node\n      });\n    }\n\n    if (node.accessibility) {\n      this.raise(TSErrors.PrivateElementHasAccessibility, {\n        at: node,\n        modifier: node.accessibility\n      });\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(TSErrors.ConstructorHasTypeParameters, {\n        at: typeParameters\n      });\n    }\n\n    const {\n      declare = false,\n      kind\n    } = method;\n\n    if (declare && (kind === \"get\" || kind === \"set\")) {\n      this.raise(TSErrors.DeclareAccessor, {\n        at: method,\n        kind\n      });\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && (this.match(47) || this.match(51))) {\n      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n    }\n\n    if (this.eatContextual(110)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n\n    for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      args[_key5 - 1] = arguments[_key5];\n    }\n\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(138) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters, _expr$typeParameters$;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n\n      if (this.hasPlugin(\"jsx\") && expr.typeParameters.params.length === 1 && !((_expr$typeParameters$ = expr.typeParameters.extra) != null && _expr$typeParameters$.trailingComma)) {\n        const parameter = expr.typeParameters.params[0];\n        if (!parameter.constraint) ;\n      }\n\n      return expr;\n    }, state);\n\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n\n    if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedArrowTypeParam, {\n        at: node\n      });\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.match(47)) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(TSErrors.PatternIsOptional, {\n          at: param\n        });\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  isValidLVal(type, isParenthesized, binding) {\n    return getOwn$1({\n      TSTypeCastExpression: true,\n      TSParameterProperty: \"parameter\",\n      TSNonNullExpression: \"expression\",\n      TSAsExpression: (binding !== BIND_NONE || isParenthesized) && [\"expression\", true],\n      TSTypeAssertion: (binding !== BIND_NONE || isParenthesized) && [\"expression\", true]\n    }, type) || super.isValidLVal(type, isParenthesized, binding);\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(null, 10);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n      return false;\n    } else {\n      return super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n\n  parseMaybeDefault() {\n    const node = super.parseMaybeDefault(...arguments);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(TSErrors.TypeAnnotationAfterAssign, {\n        at: node.typeAnnotation\n      });\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        return this.finishOp(48, 1);\n      }\n\n      if (code === 60) {\n        return this.finishOp(47, 1);\n      }\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 47) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 48) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n\n  reScan_lt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 51) {\n      this.state.pos -= 2;\n      this.finishOp(47, 1);\n      return 47;\n    }\n\n    return type;\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n              at: expr\n            });\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n        args[_key7 - 1] = arguments[_key7];\n      }\n\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(80)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(125)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n          at: node\n        });\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 80);\n    }\n  }\n\n  parseMethod() {\n    const method = super.parseMethod(...arguments);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(TSErrors.AbstractMethodHasImplementation, {\n          at: method,\n          methodName: key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n        });\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);\n  }\n\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const loc = leftOfAs.loc.start;\n\n    if (this.isContextual(93)) {\n      const firstAs = this.parseIdentifier();\n\n      if (this.isContextual(93)) {\n        const secondAs = this.parseIdentifier();\n\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      leftOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {\n        at: loc\n      });\n    }\n\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n    if (canParseAsKeyword && this.eatContextual(93)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n\n    if (isImport) {\n      this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n    }\n  }\n\n};\n\nfunction isPossiblyLiteralEnum(expression) {\n  if (expression.type !== \"MemberExpression\") return false;\n  const {\n    computed,\n    property\n  } = expression;\n\n  if (computed && property.type !== \"StringLiteral\" && (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression) {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nconst PlaceholderErrors = ParseErrorEnum`placeholders`(_ => ({\n  ClassNameIsRequired: _(\"A class name is required.\"),\n  UnexpectedSpace: _(\"Unexpected space in placeholder.\")\n}));\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(140)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace();\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace();\n      this.expect(140);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(140, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  isValidLVal(type) {\n    for (var _len8 = arguments.length, rest = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n      rest[_key8 - 1] = arguments[_key8];\n    }\n\n    return type === \"Placeholder\" || super.isValidLVal(type, ...rest);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(99)) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === 140) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(81) || this.match(140) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n          at: this.state.startLoc\n        });\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(65)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(140), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(97);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n  assertNoSpace() {\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      this.raise(PlaceholderErrors.UnexpectedSpace, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(54)) {\n      const v8IntrinsicStartLoc = this.state.startLoc;\n      const node = this.startNode();\n      this.next();\n\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStartLoc);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, expectedConfig) {\n  const [expectedName, expectedOptions] = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n  const expectedKeys = Object.keys(expectedOptions);\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n\n      if (pluginName !== expectedName) {\n        return false;\n      }\n\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst getOwn = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError({\n            at: node\n          });\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(Errors.InvalidParenthesizedAssignment, {\n            at: node\n          });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, {\n          at: node\n        });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc\n            });\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        {\n          const {\n            key,\n            value\n          } = node;\n\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n\n          this.toAssignable(value, isLHS);\n          break;\n        }\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, {\n            at: node.left.loc.end\n          });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {\n        at: prop.key\n      });\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(Errors.RestTrailingComma, {\n        at: prop\n      });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, {\n            at: trailingCommaLoc\n          });\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raise(Errors.RestTrailingComma, {\n            at: elt\n          });\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n\n        if (this.match(26) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc\n          });\n        }\n\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      start: startPos,\n      startLoc\n    } = this.state;\n\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === 134) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n\n    prop.method = false;\n    this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);\n    return prop;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  isValidLVal(type, isParenthesized, binding) {\n    return getOwn({\n      AssignmentPattern: \"left\",\n      RestElement: \"argument\",\n      ObjectProperty: \"value\",\n      ParenthesizedExpression: \"expression\",\n      ArrayPattern: \"elements\",\n      ObjectPattern: \"properties\"\n    }, type);\n  }\n\n  checkLVal(expression, _ref86) {\n    let {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false\n    } = _ref86;\n\n    var _expression$extra;\n\n    const type = expression.type;\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, {\n          at: expression\n        });\n      }\n\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged, allowingSloppyLetBinding);\n      const {\n        name\n      } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, {\n            at: expression\n          });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(expression.type, hasParenthesizedAncestor || ((_expression$extra = expression.extra) == null ? void 0 : _expression$extra.parenthesized), binding);\n    if (validity === true) return;\n\n    if (validity === false) {\n      const ParseErrorClass = binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor: ancestor.type === \"UpdateExpression\" ? {\n          type: \"UpdateExpression\",\n          prefix: ancestor.prefix\n        } : {\n          type: ancestor.type\n        }\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor = expression.type === \"ArrayPattern\" || expression.type === \"ObjectPattern\" || expression.type === \"ParenthesizedExpression\" ? expression : ancestor;\n\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression\n        });\n      }\n    }\n  }\n\n  checkIdentifier(at, bindingType) {\n    let strictModeChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let allowLetBinding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !(bindingType & BIND_SCOPE_LEXICAL);\n\n    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, {\n          at,\n          referenceName: at.name\n        });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, {\n        at\n      });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier, binding) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(Errors.InvalidRestAssignmentPattern, {\n        at: node.argument\n      });\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (!this.match(12)) {\n      return false;\n    }\n\n    this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {\n      at: this.state.startLoc\n    });\n    return true;\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, {\n          at: key\n        });\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, {\n            at: key\n          });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(135)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(12)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$loc;\n\n    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(105)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    const {\n      type\n    } = this.state;\n\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(29)) {\n        node.left = this.toAssignable(left, true);\n\n        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startPos) {\n          refExpressionErrors.doubleProtoLoc = null;\n        }\n\n        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startPos) {\n          refExpressionErrors.shorthandAssignLoc = null;\n        }\n\n        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startPos) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null;\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\")\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(134) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n\n      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n      let prec = tokenOperatorPrecedence(op);\n\n      if (prec > minPrec) {\n        if (op === 39) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 41 || op === 42;\n        const coalesce = op === 40;\n\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(42);\n        }\n\n        this.next();\n\n        if (op === 39 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 96 && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case 39:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(105)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc\n                });\n              }\n\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody() {\n    var _body$extra;\n\n    const {\n      startLoc\n    } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);\n\n    if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type\n      });\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipeTopicUnused, {\n        at: startLoc\n      });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(57)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument\n      });\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(96);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(34);\n    const node = this.startNode();\n\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(72)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(89);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, {\n            at: node\n          });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, {\n            at: node\n          });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {\n          at: startLoc\n        });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, {\n        in: this.finishNode(node, \"UpdateExpression\")\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: expr = this.finishNode(node, \"UpdateExpression\")\n      });\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === 18) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startPos, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(134)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, {\n          at: startLoc\n        });\n      }\n\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const {\n      maybeAsyncArrow,\n      optionalChainMember\n    } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, {\n        at: startLoc\n      });\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount: this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? 2 : 1\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, {\n              at: arg\n            });\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    const {\n      type\n    } = this.state;\n\n    switch (type) {\n      case 79:\n        return this.parseSuper();\n\n      case 83:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(10)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case 78:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case 90:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case 56:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case 130:\n        return this.parseNumericLiteral(this.state.value);\n\n      case 131:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case 132:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case 129:\n        return this.parseStringLiteral(this.state.value);\n\n      case 84:\n        return this.parseNullLiteral();\n\n      case 85:\n        return this.parseBooleanLiteral(true);\n\n      case 86:\n        return this.parseBooleanLiteral(false);\n\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n\n      case 68:\n        return this.parseFunctionOrFunctionSent();\n\n      case 26:\n        this.parseDecorators();\n\n      case 80:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case 77:\n        return this.parseNewOrNewTarget();\n\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(Errors.UnsupportedBind, {\n              at: callee\n            });\n          }\n        }\n\n      case 134:\n        {\n          this.raise(Errors.PrivateInExpectedIn, {\n            at: this.state.startLoc,\n            identifierName: this.state.value\n          });\n          return this.parsePrivateName();\n        }\n\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(54, \"%\");\n        }\n\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(44, \"^\");\n        }\n\n      case 37:\n      case 38:\n        {\n          return this.parseTopicReference(\"hack\");\n        }\n\n      case 44:\n      case 54:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      case 47:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            break;\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(123) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n\n            if (type === 68) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 90) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n\n    }\n  }\n\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n      const nodeType = pipeProposal === \"smart\" ? \"PipelinePrimaryTopicReference\" : \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(pipeProposal === \"smart\" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {\n          at: startLoc\n        });\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType)\n      });\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n\n      case \"smart\":\n        return tokenType === 27;\n\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, {\n          at: startLoc\n        });\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition()\n      });\n    }\n\n    this.expect(19);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.SuperNotAllowed, {\n        at: node\n      });\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.UnexpectedSuper, {\n        at: node\n      });\n    }\n\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(Errors.UnsupportedSuper, {\n        at: node\n      });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart, this.state.start + 1));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n\n      if (this.match(102)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(100)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, {\n          at: id\n        });\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n\n        if (this.match(11)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(21)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n\n        if (!this.checkCommaAfterRest(41)) {\n          break;\n        }\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      this.takeSurroundingComments(val, startPos, this.state.lastTokEndLoc.index);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, {\n          at: metaProp\n        });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, {\n        at: node.callee\n      });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc\n      });\n    } else if (this.eat(18)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      startLoc,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(startLoc, 1));\n\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          at: createPositionWithColumnOffset(startLoc, 2)\n        });\n      }\n    }\n\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(elem, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return elem;\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(Errors.InvalidRecordProperty, {\n          at: prop\n        });\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node) {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n  }\n\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc\n        });\n      }\n\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(55);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(55);\n        this.parsePropertyName(prop);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(55)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName\n          });\n          this.next();\n        }\n\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n        at: method\n      });\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(Errors.BadSetterRestParameter, {\n        at: method\n      });\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssignLoc = this.state.startLoc;\n\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc\n          });\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, refExpressionErrors) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 130:\n            key = this.parseNumericLiteral(value);\n            break;\n\n          case 129:\n            key = this.parseStringLiteral(value);\n            break;\n\n          case 131:\n            key = this.parseBigIntLiteral(value);\n            break;\n\n          case 132:\n            key = this.parseDecimalLiteral(value);\n            break;\n\n          case 134:\n            {\n              const privateKeyLoc = this.state.startLoc;\n\n              if (refExpressionErrors != null) {\n                if (refExpressionErrors.privateKeyLoc === null) {\n                  refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                }\n              } else {\n                this.raise(Errors.UnexpectedPrivateField, {\n                  at: privateKeyLoc\n                });\n              }\n\n              key = this.parsePrivateName();\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      prop.key = key;\n\n      if (type !== 134) {\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(5) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          this.raise(Errors.IllegalLanguageModeDirective, {\n            at: (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.loc.end : node\n          });\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    let strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const checkClashes = !allowDuplicates && new Set();\n    const formalParameters = {\n      type: \"FormalParameters\"\n    };\n\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged\n      });\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\"\n        });\n      }\n\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc\n        });\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      startLoc,\n      type\n    } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(128);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({\n        at: startLoc\n      });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, {\n          at: startLoc\n        });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word\n      });\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {\n      at: node\n    });\n\n    if (this.eat(55)) {\n      this.raise(Errors.ObsoleteAwaitStar, {\n        at: node\n      });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 133 || type === 56 || this.hasPlugin(\"v8intrinsic\") && type === 54;\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {\n      at: node\n    });\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(55);\n\n      switch (this.state.type) {\n        case 13:\n        case 135:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartLoc) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n    if (this.match(19)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, {\n        at: startLoc\n      });\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(5);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(8);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n  parsePropertyNamePrefixOperator(prop) {}\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n\n    if (typeof type === \"number\") {\n      {\n        if (type === 134) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(128),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n\n          if (input.charCodeAt(start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 135;\n    let sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.sourceType;\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, {\n          at,\n          localName\n        });\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(99)) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(26)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = 74;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case 60:\n        return this.parseBreakContinueStatement(node, true);\n\n      case 63:\n        return this.parseBreakContinueStatement(node, false);\n\n      case 64:\n        return this.parseDebuggerStatement(node);\n\n      case 90:\n        return this.parseDoStatement(node);\n\n      case 91:\n        return this.parseForStatement(node);\n\n      case 68:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, {\n              at: this.state.startLoc\n            });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, {\n              at: this.state.startLoc\n            });\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case 80:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case 69:\n        return this.parseIfStatement(node);\n\n      case 70:\n        return this.parseReturnStatement(node);\n\n      case 71:\n        return this.parseSwitchStatement(node);\n\n      case 72:\n        return this.parseThrowStatement(node);\n\n      case 73:\n        return this.parseTryStatement(node);\n\n      case 75:\n      case 74:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc\n          });\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case 92:\n        return this.parseWhileStatement(node);\n\n      case 76:\n        return this.parseWithStatement(node);\n\n      case 5:\n        return this.parseBlock();\n\n      case 13:\n        return this.parseEmptyStatement(node);\n\n      case 83:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case 82:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(Errors.UnexpectedImportExport, {\n              at: this.state.startLoc\n            });\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === 83) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n                at: this.state.startLoc\n              });\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, {\n        at: node\n      });\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(80);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(26)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(82)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(Errors.DecoratorExportClass, {\n          at: this.state.startLoc\n        });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(10)) {\n        expr = this.parseExpression();\n        this.expect(11);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, isBreak) {\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, {\n        at: node,\n        type\n      });\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(92);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(96)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(10);\n\n    if (this.match(13)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(99);\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(74) || this.match(75) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(58) || this.isContextual(101)) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithAsync = this.isContextual(95);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(101);\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, {\n          at: init\n        });\n      }\n\n      if (awaitAt === null && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(Errors.ForOfAsync, {\n          at: init\n        });\n      }\n    }\n\n    if (isForOf || this.match(58)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, {\n        in: {\n          type\n        }\n      });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(66) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(61) || this.match(65)) {\n        const isCase = this.match(61);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: {\n        type: \"CatchClause\"\n      },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true\n    });\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(62)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(67) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, {\n        at: node\n      });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    let allowMissingInitializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(71) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock() {\n    let allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(5);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(58);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\"\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: {\n          type: \"ForStatement\"\n        }\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    let allowMissingInitializer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const declarations = node.declarations = [];\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(58) || this.isContextual(101)))) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\"\n          });\n        } else if (kind === \"const\" && !(this.match(58) || this.isContextual(101))) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\"\n          });\n        }\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: {\n        type: \"VariableDeclarator\"\n      },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL\n    });\n  }\n\n  parseFunction(node) {\n    let statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n    let isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(55) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.generator = this.eat(55);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n\n  isClassMethod() {\n    return this.match(10);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc\n            });\n          }\n\n          continue;\n        }\n\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(Errors.DecoratorConstructor, {\n            at: member\n          });\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(104);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const accessorProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(55)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(134);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key\n        });\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(134);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, {\n            at: key\n          });\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, {\n            at: key\n          });\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(55);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(134);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, {\n            at: publicMethod.key\n          });\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(55) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(134);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, {\n            at: publicMethod.key\n          });\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (isContextual && key.name === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n      const isPrivate = this.match(134);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value\n    } = this.state;\n\n    if ((type === 128 || type === 129) && member.static && value === \"prototype\") {\n      this.raise(Errors.StaticPrototype, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (type === 134) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc\n        });\n      }\n\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(Errors.DecoratorStaticBlock, {\n        at: member\n      });\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(Errors.ConstructorClassField, {\n        at: prop.key\n      });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n  }\n\n  pushClassAccessorProperty(classBody, prop, isPrivate) {\n    if (!isPrivate && !prop.computed) {\n      const key = prop.key;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        this.raise(Errors.ConstructorClassField, {\n          at: key\n        });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n    }\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    let bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, {\n          at: this.state.startLoc\n        });\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, 5);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(65)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, 5);\n  }\n\n  eatExportStar(node) {\n    return this.eat(55);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(93)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(95)) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(68) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    }\n\n    if (this.match(80)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(Errors.DecoratorBeforeExport, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(75) || this.match(74) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsIdentifier(type)) {\n      if (type === 95 && !this.state.containsEsc || type === 99) {\n        return false;\n      }\n\n      if ((type === 126 || type === 125) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n\n        if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(65)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(65) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(97)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName\n              });\n            } else {\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, {\n        at: node\n      });\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, exportName) {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, {\n          at: node\n        });\n      } else {\n        this.raise(Errors.DuplicateExport, {\n          at: node,\n          exportName\n        });\n      }\n    }\n\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const isMaybeTypeOnly = this.isContextual(126);\n      const isString = this.match(129);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n\n  parseModuleExportName() {\n    if (this.match(129)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0)\n        });\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(129)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(12);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(97);\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(129)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier(specifier, type) {\n    this.checkLVal(specifier.local, {\n      in: specifier,\n      binding: BIND_LEXICAL\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(8)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName\n        });\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(129)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(14);\n\n      if (!this.match(129)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(76) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name\n        });\n      }\n\n      attributes.add(node.key.name);\n      this.expect(14);\n\n      if (!this.match(129)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(5);\n    const attrs = this.parseAssertEntries();\n    this.eat(8);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(55)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(93);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc\n          });\n        }\n\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(129);\n      const isMaybeTypeOnly = this.isContextual(126);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value\n        });\n      }\n\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n\n  return tokenTypes;\n}\n\nconst tokTypes = generateExportedTokenTypes(tt);\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"mappings":"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","names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCodes","Object","freeze","SyntaxError","SourceTypeModuleError","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","_","ImportMetaOutsideModule","code","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","toMessage","_ref","loc","details","clone","overrides","message","pos","toParseErrorCredentials","toMessageOrMessage","credentials","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","toParseErrorCredentialsMap","partialCredentials","ParseErrorConstructors","reasonCode","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","args","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isValidLVal","rest","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","raise","at","finishCallExpression","optional","callee","source","arguments","hasPlugin","attributes","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","state","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","template","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","isLookahead","pushToken","checkKeywordEscapes","nextToken","eat","match","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","inClass","content","mods","char","includes","readInt","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","_isDigit","errorRecovery","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","containsInvalid","inTemplate","codePos","substr","octalStr","octal","codeLoc","n","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","_node$extra","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","_arrowExpression$extr","maybeUnwrapTypeCastExpression","async","_jsx2","_jsx3","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","CannotFindName","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifiersOrder","orderedModifiers","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","typeReference","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","_jsx","_expr$typeParameters$","trailingComma","reportReservedArrowTypeParam","_typeCast","_typeCast2","_typeCast3","toAssignableParenthesizedExpression","isParenthesized","binding","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","isLast","_node$extra2","checkToRestConversion","arg","_node$extra3","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","strictModeChanged","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","_expression$extra","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","_body$extra","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","parseForIn","startsWithAsync","isForOf","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","nodes","surrogate","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"sources":["/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/util/location.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parse-error/credentials.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parse-error/module-errors.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parse-error/to-node-description.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parse-error/standard-errors.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parse-error/strict-mode-errors.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parse-error.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/plugins/estree.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/tokenizer/context.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/tokenizer/types.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/util/identifier.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/util/scopeflags.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parser/base.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parser/comments.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/util/whitespace.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/tokenizer/state.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/tokenizer/index.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/util/scope.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/plugins/flow/scope.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/util/class-scope.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/util/expression-scope.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/util/production-parameter.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parser/util.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parser/node.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/plugins/flow/index.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/plugins/jsx/xhtml.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/plugins/jsx/index.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/plugins/typescript/scope.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/plugins/typescript/index.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/plugins/placeholders.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/plugins/v8intrinsic.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/plugin-utils.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/options.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parser/lval.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parser/expression.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parser/statement.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/parser/index.js","/Users/rafaeljordao/Documents/my-portfolio/node_modules/@babel/parser/src/index.js"],"sourcesContent":["// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","// @flow\n\nexport const ParseErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ParseErrorCode = $Values<typeof ParseErrorCodes>;\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode,\n  reasonCode: string,\n  syntaxPlugin?: SyntaxPlugin,\n\n  toMessage: ToMessage<ErrorDetails>,\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get() {\n    return keys.reduce((object, key) => object[key], this);\n  },\n  set(value) {\n    keys.reduce(\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: () => any,\n  properties: Object,\n  descriptors: Object,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign((new constructor(): T), properties),\n    );\n\nexport { instantiate };\n","// @flow\n\nimport { ParseErrorCodes, toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  ImportMetaOutsideModule: _(\n    `import.meta may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n  ImportOutsideModule: _(\n    `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n});\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = $Keys<\n  $Diff<typeof NodeDescriptions, { UpdateExpression: any }>,\n>;\ntype NodeWithDescription =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | { type: NodeTypesWithDescriptions };\n\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix)]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"Identfier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\",\n    };\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  AccessorIsGenerator: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `A ${kind}ter cannot be a generator.`,\n  ),\n\n  ArgumentsInClass: _(\n    \"'arguments' is only allowed in functions and class methods.\",\n  ),\n  AsyncFunctionInSingleStatementContext: _(\n    \"Async functions can only be declared at the top level or inside a block.\",\n  ),\n  AwaitBindingIdentifier: _(\n    \"Can not use 'await' as identifier inside an async function.\",\n  ),\n  AwaitBindingIdentifierInStaticBlock: _(\n    \"Can not use 'await' as identifier inside a static block.\",\n  ),\n  AwaitExpressionFormalParameter: _(\n    \"'await' is not allowed in async function parameters.\",\n  ),\n  AwaitNotInAsyncContext: _(\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  ),\n  AwaitNotInAsyncFunction: _(\"'await' is only allowed within async functions.\"),\n  BadGetterArity: _(\"A 'get' accesor must not have any formal parameters.\"),\n  BadSetterArity: _(\"A 'set' accesor must have exactly one formal parameter.\"),\n  BadSetterRestParameter: _(\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ),\n  ConstructorClassField: _(\"Classes may not have a field named 'constructor'.\"),\n  ConstructorClassPrivateField: _(\n    \"Classes may not have a private field named '#constructor'.\",\n  ),\n  ConstructorIsAccessor: _(\"Class constructor may not be an accessor.\"),\n  ConstructorIsAsync: _(\"Constructor can't be an async function.\"),\n  ConstructorIsGenerator: _(\"Constructor can't be a generator.\"),\n  DeclarationMissingInitializer: _<{| kind: \"const\" | \"destructuring\" |}>(\n    ({ kind }) => `Missing initializer in ${kind} declaration.`,\n  ),\n  DecoratorBeforeExport: _(\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  ),\n  DecoratorConstructor: _(\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  ),\n  DecoratorExportClass: _(\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  ),\n  DecoratorSemicolon: _(\"Decorators must not be followed by a semicolon.\"),\n  DecoratorStaticBlock: _(\"Decorators can't be used with a static block.\"),\n  DeletePrivateField: _(\"Deleting a private field is not allowed.\"),\n  DestructureNamedImport: _(\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  ),\n  DuplicateConstructor: _(\"Duplicate constructor in the same class.\"),\n  DuplicateDefaultExport: _(\"Only one default export allowed per module.\"),\n  DuplicateExport: _<{| exportName: string |}>(\n    ({ exportName }) =>\n      `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  ),\n  DuplicateProto: _(\"Redefinition of __proto__ property.\"),\n  DuplicateRegExpFlags: _(\"Duplicate regular expression flag.\"),\n  ElementAfterRest: _(\"Rest element must be last element.\"),\n  EscapedCharNotAnIdentifier: _(\"Invalid Unicode escape.\"),\n  ExportBindingIsString: _<{| localName: string, exportName: string |}>(\n    ({ localName, exportName }) =>\n      `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ),\n  ExportDefaultFromAsIdentifier: _(\n    \"'from' is not allowed as an identifier after 'export default'.\",\n  ),\n\n  ForInOfLoopInitializer: _<{| type: \"ForInStatement\" | \"ForOfStatement\" |}>(\n    ({ type }) =>\n      `'${\n        type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n      }' loop variable declaration may not have an initializer.`,\n  ),\n\n  ForOfAsync: _(\"The left-hand side of a for-of loop may not be 'async'.\"),\n  ForOfLet: _(\"The left-hand side of a for-of loop may not start with 'let'.\"),\n  GeneratorInSingleStatementContext: _(\n    \"Generators can only be declared at the top level or inside a block.\",\n  ),\n\n  IllegalBreakContinue: _<{| type: \"BreakStatement\" | \"ContinueStatement\" |}>(\n    ({ type }) =>\n      `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n  ),\n\n  IllegalLanguageModeDirective: _(\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  ),\n  IllegalReturn: _(\"'return' outside of function.\"),\n  ImportBindingIsString: _<{| importName: string |}>(\n    ({ importName }) =>\n      `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ),\n  ImportCallArgumentTrailingComma: _(\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ),\n  ImportCallArity: _<{| maxArgumentCount: 1 | 2 |}>(\n    ({ maxArgumentCount }) =>\n      `\\`import()\\` requires exactly ${\n        maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n      }.`,\n  ),\n  ImportCallNotNewExpression: _(\"Cannot use new with import(...).\"),\n  ImportCallSpreadArgument: _(\"`...` is not allowed in `import()`.\"),\n  IncompatibleRegExpUVFlags: _(\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  ),\n  InvalidBigIntLiteral: _(\"Invalid BigIntLiteral.\"),\n  InvalidCodePoint: _(\"Code point out of bounds.\"),\n  InvalidCoverInitializedName: _(\"Invalid shorthand property initializer.\"),\n  InvalidDecimal: _(\"Invalid decimal.\"),\n  InvalidDigit: _<{| radix: number |}>(\n    ({ radix }) => `Expected number in radix ${radix}.`,\n  ),\n  InvalidEscapeSequence: _(\"Bad character escape sequence.\"),\n  InvalidEscapeSequenceTemplate: _(\"Invalid escape sequence in template.\"),\n  InvalidEscapedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`,\n  ),\n  InvalidIdentifier: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Invalid identifier ${identifierName}.`,\n  ),\n  InvalidLhs: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidLhsBinding: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidNumber: _(\"Invalid number.\"),\n  InvalidOrMissingExponent: _(\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  ),\n  InvalidOrUnexpectedToken: _<{| unexpected: string |}>(\n    ({ unexpected }) => `Unexpected character '${unexpected}'.`,\n  ),\n  InvalidParenthesizedAssignment: _(\n    \"Invalid parenthesized assignment pattern.\",\n  ),\n  InvalidPrivateFieldResolution: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Private name #${identifierName} is not defined.`,\n  ),\n  InvalidPropertyBindingPattern: _(\"Binding member expression.\"),\n  InvalidRecordProperty: _(\n    \"Only properties and spread elements are allowed in record definitions.\",\n  ),\n  InvalidRestAssignmentPattern: _(\"Invalid rest operator's argument.\"),\n  LabelRedeclaration: _<{| labelName: string |}>(\n    ({ labelName }) => `Label '${labelName}' is already declared.`,\n  ),\n  LetInLexicalBinding: _(\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  ),\n  LineTerminatorBeforeArrow: _(\"No line break is allowed before '=>'.\"),\n  MalformedRegExpFlags: _(\"Invalid regular expression flag.\"),\n  MissingClassName: _(\"A class name is required.\"),\n  MissingEqInAssignment: _(\n    \"Only '=' operator can be used for specifying default value.\",\n  ),\n  MissingSemicolon: _(\"Missing semicolon.\"),\n  MissingPlugin: _<{| missingPlugin: [string] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also), seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: _<{| missingPlugin: string[] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  MissingUnicodeEscape: _(\"Expecting Unicode escape sequence \\\\uXXXX.\"),\n  MixingCoalesceWithLogical: _(\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ),\n  ModuleAttributeDifferentFromType: _(\n    \"The only accepted module attribute is `type`.\",\n  ),\n  ModuleAttributeInvalidValue: _(\n    \"Only string literals are allowed as module attribute values.\",\n  ),\n  ModuleAttributesWithDuplicateKeys: _<{| key: string |}>(\n    ({ key }) => `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ),\n  ModuleExportNameHasLoneSurrogate: _<{| surrogateCharCode: number |}>(\n    ({ surrogateCharCode }) =>\n      `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n        16,\n      )}'.`,\n  ),\n  ModuleExportUndefined: _<{| localName: string |}>(\n    ({ localName }) => `Export '${localName}' is not defined.`,\n  ),\n  MultipleDefaultsInSwitch: _(\"Multiple default clauses.\"),\n  NewlineAfterThrow: _(\"Illegal newline after throw.\"),\n  NoCatchOrFinally: _(\"Missing catch or finally clause.\"),\n  NumberIdentifier: _(\"Identifier directly after number.\"),\n  NumericSeparatorInEscapeSequence: _(\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ),\n  ObsoleteAwaitStar: _(\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  ),\n  OptionalChainingNoNew: _(\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  ),\n  OptionalChainingNoTemplate: _(\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  ),\n  OverrideOnConstructor: _(\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ),\n  ParamDupe: _(\"Argument name clash.\"),\n  PatternHasAccessor: _(\"Object pattern can't contain getter or setter.\"),\n  PatternHasMethod: _(\"Object pattern can't contain methods.\"),\n  PrivateInExpectedIn: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  ),\n  PrivateNameRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Duplicate private name #${identifierName}.`,\n  ),\n  RecordExpressionBarIncorrectEndSyntaxType: _(\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionBarIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionHashIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  RecordNoProto: _(\"'__proto__' is not allowed in Record expressions.\"),\n  RestTrailingComma: _(\"Unexpected trailing comma after rest element.\"),\n  SloppyFunction: _(\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  ),\n  StaticPrototype: _(\"Classes may not have static property named prototype.\"),\n  SuperNotAllowed: _(\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  ),\n  SuperPrivateField: _(\"Private fields can't be accessed on super.\"),\n  TrailingDecorator: _(\"Decorators must be attached to a class element.\"),\n  TupleExpressionBarIncorrectEndSyntaxType: _(\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionBarIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionHashIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  UnexpectedArgumentPlaceholder: _(\"Unexpected argument placeholder.\"),\n  UnexpectedAwaitAfterPipelineBody: _(\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  ),\n  UnexpectedDigitAfterHash: _(\"Unexpected digit after hash token.\"),\n  UnexpectedImportExport: _(\n    \"'import' and 'export' may only appear at the top level.\",\n  ),\n  UnexpectedKeyword: _<{| keyword: string |}>(\n    ({ keyword }) => `Unexpected keyword '${keyword}'.`,\n  ),\n  UnexpectedLeadingDecorator: _(\n    \"Leading decorators must be attached to a class declaration.\",\n  ),\n  UnexpectedLexicalDeclaration: _(\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  ),\n  UnexpectedNewTarget: _(\n    \"`new.target` can only be used in functions or class properties.\",\n  ),\n  UnexpectedNumericSeparator: _(\n    \"A numeric separator is only allowed between two digits.\",\n  ),\n  UnexpectedPrivateField: _(\"Unexpected private name.\"),\n  UnexpectedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`,\n  ),\n  UnexpectedSuper: _(\"'super' is only allowed in object methods and classes.\"),\n  UnexpectedToken: _<{|\n    expected?: ?string,\n    unexpected?: ?string,\n  |}>(\n    ({ expected, unexpected }) =>\n      `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n        expected ? `, expected \"${expected}\"` : \"\"\n      }`,\n  ),\n  UnexpectedTokenUnaryExponentiation: _(\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  ),\n  UnsupportedBind: _(\"Binding should be performed on object property.\"),\n  UnsupportedDecoratorExport: _(\n    \"A decorated export must export a class declaration.\",\n  ),\n  UnsupportedDefaultExport: _(\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  ),\n  UnsupportedImport: _(\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  ),\n  UnsupportedMetaProperty: _<{|\n    target: string,\n    onlyValidPropertyName: string,\n  |}>(\n    ({ target, onlyValidPropertyName }) =>\n      `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  ),\n  UnsupportedParameterDecorator: _(\n    \"Decorators cannot be used to decorate parameters.\",\n  ),\n  UnsupportedPropertyDecorator: _(\n    \"Decorators cannot be used to decorate object literal properties.\",\n  ),\n  UnsupportedSuper: _(\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  ),\n  UnterminatedComment: _(\"Unterminated comment.\"),\n  UnterminatedRegExp: _(\"Unterminated regular expression.\"),\n  UnterminatedString: _(\"Unterminated string constant.\"),\n  UnterminatedTemplate: _(\"Unterminated template.\"),\n  VarRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Identifier '${identifierName}' has already been declared.`,\n  ),\n  YieldBindingIdentifier: _(\n    \"Can not use 'yield' as identifier inside a generator.\",\n  ),\n  YieldInParameter: _(\"Yield expression is not allowed in formal parameters.\"),\n  ZeroDigitNumericSeparator: _(\n    \"Numeric separator can not be used after leading 0.\",\n  ),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  StrictDelete: _(\"Deleting local variable in strict mode.\"),\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: _<{| referenceName: string |}>(\n    ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`,\n  ),\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: _<{| bindingName: string |}>(\n    ({ bindingName }) => `Binding '${bindingName}' in strict mode.`,\n  ),\n\n  StrictFunction: _(\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  ),\n  StrictNumericEscape: _(\n    \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  ),\n  StrictOctalLiteral: _(\n    \"Legacy octal literals are not allowed in strict mode.\",\n  ),\n  StrictWith: _(\"'with' in strict mode.\"),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set<string>([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n]);\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter: _(\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  ),\n  PipeTopicRequiresHackPipes: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n  PipeTopicUnbound: _(\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  ),\n  PipeTopicUnconfiguredToken: _<{| token: string |}>(\n    ({ token }) =>\n      `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  ),\n  PipeTopicUnused: _(\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  ),\n  PipeUnparenthesizedBody: _<{| type: string |}>(\n    ({ type }) =>\n      `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n        type,\n      })}; please wrap it in parentheses.`,\n  ),\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow: _(\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  ),\n  PipelineBodySequenceExpression: _(\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  ),\n  PipelineHeadSequenceExpression: _(\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  ),\n  PipelineTopicUnused: _(\n    \"Pipeline is in topic style but does not use topic reference.\",\n  ),\n  PrimaryTopicNotAllowed: _(\n    \"Topic reference was used in a lexical context without topic binding.\",\n  ),\n  PrimaryTopicRequiresSmartPipeline: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n});\n","// @flow\n\nimport { Position } from \"./util/location\";\nimport type { NodeBase } from \"./types\";\nimport {\n  instantiate,\n  type ParseErrorCode,\n  ParseErrorCodes,\n  type ParseErrorCredentials,\n} from \"./parse-error/credentials\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: string;\n\n  missingPlugin?: string | string[];\n\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = ({\n  loc: Position,\n  details: ErrorDetails,\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails: Object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = { loc: Position, details: ErrorDetails };\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate<ParseError<ErrorDetails>>(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(overrides: { loc?: Position, details?: ErrorDetails } = {}) {\n          const loc = overrides.loc || {};\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get() {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    );\n  };\n}\n\n// This part is tricky. You'll probably notice from the name of this function\n// that it is supposed to return `ParseErrorCredentials`, but instead these.\n// declarations seem to instead imply that they return\n// `ParseErrorConstructor<ErrorDetails>` instead. This is because in Flow we\n// can't easily extract parameter types (either from functions, like with\n// Typescript's Parameters<f> utility type, or from generic types either). As\n// such, this function does double duty: packaging up the credentials during\n// its actual runtime operation, but pretending to return the\n// `ParseErrorConstructor<ErrorDetails>` that we won't actually have until later\n// to the type system, avoiding the need to do so with $ObjMap (which doesn't\n// work) in `ParseErrorEnum`. This hack won't be necessary when we switch to\n// Typescript.\ndeclare function toParseErrorCredentials<T: string>(\n  T,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<{||}>;\n\n// ESLint seems to erroneously think that Flow's overloading syntax is an\n// accidental redeclaration of the function:\n// https://github.com/babel/eslint-plugin-babel/issues/162\n// eslint-disable-next-line no-redeclare\ndeclare function toParseErrorCredentials<ErrorDetails>(\n  (ErrorDetails) => string,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<ErrorDetails>;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function toParseErrorCredentials(toMessageOrMessage, credentials) {\n  return {\n    toMessage:\n      typeof toMessageOrMessage === \"string\"\n        ? () => toMessageOrMessage\n        : toMessageOrMessage,\n    ...credentials,\n  };\n}\n\n// This is the templated form.\ndeclare function ParseErrorEnum(string[]): typeof ParseErrorEnum;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\ndeclare function ParseErrorEnum<T>(\n  toParseErrorCredentials: (typeof toParseErrorCredentials) => T,\n  syntaxPlugin?: string,\n): T;\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either error\n// messages, or `toMessage` functions that define additional necessary `details`\n// needed by the `ParseError`:\n//\n// ParseErrorEnum`optionalSyntaxPlugin` (_ => ({\n//   ErrorWithStaticMessage: _(\"message\"),\n//   ErrorWithDynamicMessage: _<{ type: string }>(({ type }) => `${type}`),\n// });\n//\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function ParseErrorEnum(argument, syntaxPlugin) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return toParseErrorCredentialsMap =>\n      ParseErrorEnum(toParseErrorCredentialsMap, argument[0]);\n  }\n\n  const partialCredentials = argument(toParseErrorCredentials);\n  const ParseErrorConstructors = {};\n\n  for (const reasonCode of Object.keys(partialCredentials)) {\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCodes.SyntaxError,\n      reasonCode,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...partialCredentials[reasonCode],\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {|\n  ...ErrorDetails,\n  at: Position | NodeBase,\n|};\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object, key) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Property\" ? \"value\" : super.isValidLVal(type, ...rest);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc?: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX openning tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport { Errors, type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser from \"../parser/comments\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = new Set([\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n]);\nallowedNumericSeparatorSiblings.oct = new Set([\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n]);\nallowedNumericSeparatorSiblings.dec = new Set([\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n]);\n\nallowedNumericSeparatorSiblings.hex = new Set([\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          Number.isNaN(next) ||\n          !allowedSiblings.has(next) ||\n          forbiddenSiblings.has(prev) ||\n          forbiddenSiblings.has(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(Errors.InvalidDigit, {\n            at: this.state.curPosition(),\n            radix,\n          });\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads tempalte continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            at: createPositionWithColumnOffset(this.state.curPosition(), -1),\n          });\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n                at: codePos,\n              });\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | empty {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: string, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: string[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n}\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","// @flow\n\nimport { Errors } from \"../parse-error\";\nimport { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport Tokenizer from \"../tokenizer\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\n\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ArrowHeadParsingDeclarationError, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError<T: ArrowHeadParsingDeclarationError>(\n    ParsingErrorClass: T,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: ([ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    { at: node }: { at: Node },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError({ at: node }: { at: Node }): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(Errors.InvalidParenthesizedAssignment, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(\n        Errors.InvalidParenthesizedAssignment,\n        origin,\n      );\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParseError<any>),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  privateKeyLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`(_ => ({\n  AmbiguousConditionalArrow: _(\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  ),\n  AmbiguousDeclareModuleKind: _(\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  ),\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`,\n  ),\n  DeclareClassElement: _(\n    \"The `declare` modifier can only appear on class fields.\",\n  ),\n  DeclareClassFieldInitializer: _(\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  ),\n  DuplicateDeclareModuleExports: _(\n    \"Duplicate `declare module.exports` statement.\",\n  ),\n  EnumBooleanMemberNotInitialized: _<{|\n    memberName: string,\n    enumName: string,\n  |}>(\n    ({ memberName, enumName }) =>\n      `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumDuplicateMemberName: _<{| memberName: string, enumName: string |}>(\n    ({ memberName, enumName }) =>\n      `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  ),\n  EnumInconsistentMemberValues: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  ),\n  EnumInvalidExplicitType: _<{| invalidEnumType: string, enumName: string |}>(\n    ({ invalidEnumType, enumName }) =>\n      `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidExplicitTypeUnknownSupplied: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName, explicitType }) =>\n      // $FlowIgnore (coercing null which never actually happens)\n      `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  ),\n  EnumInvalidMemberInitializerSymbolType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberInitializerUnknownType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberName: _<{|\n    enumName: string,\n    memberName: string,\n    suggestion: string,\n  |}>(\n    ({ enumName, memberName, suggestion }) =>\n      `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  ),\n  EnumNumberMemberNotInitialized: _<{|\n    enumName: string,\n    memberName: string,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumStringMemberInconsistentlyInitailized: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  ),\n  GetterMayNotHaveThisParam: _(\"A getter cannot have a `this` parameter.\"),\n  ImportTypeShorthandOnlyInPureImport: _(\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  ),\n  InexactInsideExact: _(\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  ),\n  InexactInsideNonObject: _(\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  ),\n  InexactVariance: _(\"Explicit inexact syntax cannot have variance.\"),\n  InvalidNonTypeImportInDeclareModule: _(\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  ),\n  MissingTypeParamDefault: _(\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  ),\n  NestedDeclareModule: _(\n    \"`declare module` cannot be used inside another `declare module`.\",\n  ),\n  NestedFlowComment: _(\n    \"Cannot have a flow comment inside another flow comment.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    !process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {},\n  ),\n  SetterMayNotHaveThisParam: _(\"A setter cannot have a `this` parameter.\"),\n  SpreadVariance: _(\"Spread properties cannot have variance.\"),\n  ThisParamAnnotationRequired: _(\n    \"A type annotation is required for the `this` parameter.\",\n  ),\n  ThisParamBannedInConstructor: _(\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ),\n  ThisParamMayNotBeOptional: _(\"The `this` parameter cannot be optional.\"),\n  ThisParamMustBeFirst: _(\n    \"The `this` parameter must be the first function parameter.\",\n  ),\n  ThisParamNoDefault: _(\"The `this` parameter may not have a default value.\"),\n  TypeBeforeInitializer: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeCastInPattern: _(\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  ),\n  UnexpectedExplicitInexactInObject: _(\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  ),\n  UnexpectedReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Unexpected reserved type ${reservedType}.`,\n  ),\n  UnexpectedReservedUnderscore: _(\n    \"`_` is only allowed as a type argument to call or new.\",\n  ),\n  UnexpectedSpaceBetweenModuloChecks: _(\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  ),\n  UnexpectedSpreadType: _(\n    \"Spread operator cannot appear in class or interface definitions.\",\n  ),\n  UnexpectedSubtractionOperand: _(\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  ),\n  UnexpectedTokenAfterTypeParameter: _(\n    \"Expected an arrow function after this type parameter declaration.\",\n  ),\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: _(\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  ),\n  UnsupportedDeclareExportKind: _<{|\n    unsupportedExportKind: string,\n    suggestion: string,\n  |}>(\n    ({ unsupportedExportKind, suggestion }) =>\n      `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  ),\n  UnsupportedStatementInDeclareModule: _(\n    \"Only declares and type imports are allowed inside declare module.\",\n  ),\n  UnterminatedFlowComment: _(\"Unterminated flow-comment.\"),\n}));\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"TypeCastExpression\" || super.isValidLVal(type, ...rest);\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string, __proto__: null } = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`(_ => ({\n  AttributeIsEmpty: _(\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  ),\n  MissingClosingTagElement: _<{| openingTagName: string |}>(\n    ({ openingTagName }) =>\n      `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  ),\n  MissingClosingTagFragment: _(\n    \"Expected corresponding JSX closing tag for <>.\",\n  ),\n  UnexpectedSequenceExpression: _(\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  ),\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: _<{| unexpected: string, HTMLEntity: string |}>(\n    ({ unexpected, HTMLEntity }) =>\n      `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  ),\n  UnsupportedJsxValue: _(\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  ),\n  UnterminatedJsxContent: _(\"Unterminated JSX contents.\"),\n  UnwrappedAdjacentJSXElements: _(\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            // $FlowIgnore\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              // $FlowIgnore\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { Position, createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_NONE,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`(_ => ({\n  AbstractMethodHasImplementation: _<{| methodName: string |}>(\n    ({ methodName }) =>\n      `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  ),\n  AbstractPropertyHasInitializer: _<{| propertyName: string |}>(\n    ({ propertyName }) =>\n      `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  ),\n  AccesorCannotDeclareThisParameter: _(\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  ),\n  AccesorCannotHaveTypeParameters: _(\n    \"An accessor cannot have type parameters.\",\n  ),\n  CannotFindName: _<{| name: string |}>(\n    ({ name }) => `Cannot find name '${name}'.`,\n  ),\n  ClassMethodHasDeclare: _(\"Class methods cannot have the 'declare' modifier.\"),\n  ClassMethodHasReadonly: _(\n    \"Class methods cannot have the 'readonly' modifier.\",\n  ),\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: _(\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ),\n  ConstructorHasTypeParameters: _(\n    \"Type parameters cannot appear on a constructor declaration.\",\n  ),\n  DeclareAccessor: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `'declare' is not allowed in ${kind}ters.`,\n  ),\n  DeclareClassFieldHasInitializer: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  DeclareFunctionHasImplementation: _(\n    \"An implementation cannot be declared in ambient contexts.\",\n  ),\n  DuplicateAccessibilityModifier: _<{| modifier: N.Accessibility |}>(\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line no-unused-vars\n    ({ modifier }) => `Accessibility modifier already seen.`,\n  ),\n  DuplicateModifier: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `Duplicate modifier: '${modifier}'.`,\n  ),\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: _<{| token: \"extends\" | \"implements\" |}>(\n    ({ token }) => `'${token}' list cannot be empty.`,\n  ),\n  EmptyTypeArguments: _(\"Type argument list cannot be empty.\"),\n  EmptyTypeParameters: _(\"Type parameter list cannot be empty.\"),\n  ExpectedAmbientAfterExportDeclare: _(\n    \"'export declare' must be followed by an ambient declaration.\",\n  ),\n  ImportAliasHasImportType: _(\"An import alias can not use 'import type'.\"),\n  IncompatibleModifiers: _<{| modifiers: [TsModifier, TsModifier] |}>(\n    ({ modifiers }) =>\n      `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  ),\n  IndexSignatureHasAbstract: _(\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  ),\n  IndexSignatureHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  IndexSignatureHasDeclare: _(\n    \"Index signatures cannot have the 'declare' modifier.\",\n  ),\n  IndexSignatureHasOverride: _(\n    \"'override' modifier cannot appear on an index signature.\",\n  ),\n  IndexSignatureHasStatic: _(\n    \"Index signatures cannot have the 'static' modifier.\",\n  ),\n  InitializerNotAllowedInAmbientContext: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  InvalidModifierOnTypeMember: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`,\n  ),\n  InvalidModifiersOrder: _<{| orderedModifiers: [TsModifier, TsModifier] |}>(\n    ({ orderedModifiers }) =>\n      `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  ),\n  InvalidTupleMemberLabel: _(\n    \"Tuple members must be labeled with a simple identifier.\",\n  ),\n  MissingInterfaceName: _(\n    \"'interface' declarations must be followed by an identifier.\",\n  ),\n  MixedLabeledAndUnlabeledElements: _(\n    \"Tuple members must all have names or all not have names.\",\n  ),\n  NonAbstractClassHasAbstractMethod: _(\n    \"Abstract methods can only appear within an abstract class.\",\n  ),\n  NonClassMethodPropertyHasAbstractModifer: _(\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  ),\n  OptionalTypeBeforeRequired: _(\n    \"A required element cannot follow an optional element.\",\n  ),\n  OverrideNotInSubClass: _(\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  ),\n  PrivateElementHasAbstract: _(\n    \"Private elements cannot have the 'abstract' modifier.\",\n  ),\n  PrivateElementHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  ReadonlyForMethodSignature: _(\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ),\n  ReservedArrowTypeParam: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ),\n  ReservedTypeAssertion: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  ),\n  SetAccesorCannotHaveOptionalParameter: _(\n    \"A 'set' accessor cannot have an optional parameter.\",\n  ),\n  SetAccesorCannotHaveRestParameter: _(\n    \"A 'set' accessor cannot have rest parameter.\",\n  ),\n  SetAccesorCannotHaveReturnType: _(\n    \"A 'set' accessor cannot have a return type annotation.\",\n  ),\n  SingleTypeParameterWithoutTrailingComma: _<{| typeParameterName: string |}>(\n    ({ typeParameterName }) =>\n      `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  ),\n  StaticBlockCannotHaveModifier: _(\n    \"Static class blocks cannot have any modifier.\",\n  ),\n  TypeAnnotationAfterAssign: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeImportCannotSpecifyDefaultAndNamed: _(\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  ),\n  TypeModifierIsUsedInTypeExports: _(\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  ),\n  TypeModifierIsUsedInTypeImports: _(\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  ),\n  UnexpectedParameterModifier: _(\n    \"A parameter property is only allowed in a constructor implementation.\",\n  ),\n  UnexpectedReadonly: _(\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  ),\n  UnexpectedTypeAnnotation: _(\"Did not expect a type annotation here.\"),\n  UnexpectedTypeCastInParameter: _(\n    \"Unexpected type cast in parameter position.\",\n  ),\n  UnsupportedImportTypeArgument: _(\n    \"Argument in a type import must be a string literal.\",\n  ),\n  UnsupportedParameterPropertyKind: _(\n    \"A parameter property may not be declared using a binding pattern.\",\n  ),\n  UnsupportedSignatureParameterKind: _<{| type: string |}>(\n    ({ type }) =>\n      `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n    }: {\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    }): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(TSErrors.InvalidModifierOnTypeMember, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type !== tt._const) return null;\n\n      this.next();\n      const typeReference = this.tsParseTypeReference();\n\n      // If the type reference has type parameters, then you are using it as a\n      // type and not as a const signifier. We'll *never* be able to find this\n      // name, since const isn't allowed as a type name. So in this instance we\n      // get to pretend we're the type checker.\n      if (typeReference.typeParameters) {\n        this.raise(TSErrors.CannotFindName, {\n          at: typeReference.typeName,\n          name: \"const\",\n        });\n      }\n\n      return typeReference;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      node.expression = this.tsParseEntityName();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n      properties: { declare?: true } = {},\n    ): ?N.TsInterfaceDeclaration {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      properties: { const?: true, declare?: true } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorLoc = this.state.curPosition();\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (tokenIsTemplate(this.state.type)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      // tsTryParseAndCatch is expensive, so avoid if not necessary.\n      // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n      // Also handles `new C<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArgumentsInExpression();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node: N.TsEnumDeclaration = this.startNode();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(this.startNode());\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        stopOnStartOfClassStaticBlock: true,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member: any).accessibility,\n          });\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: ?N.Declaration =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      let invalidSingleType: ?N.TsTypeParameter;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        // report error if single type parameter used without trailing comma.\n        if (\n          this.hasPlugin(\"jsx\") &&\n          expr.typeParameters.params.length === 1 &&\n          !expr.typeParameters.extra?.trailingComma\n        ) {\n          const parameter = expr.typeParameters.params[0];\n          if (!parameter.constraint) {\n            // A single type parameter must either have constraints\n            // or a trailing comma, otherwise it's ambiguous with JSX.\n            invalidSingleType = parameter;\n          }\n        }\n\n        return expr;\n      }, state);\n\n      if (process.env.BABEL_8_BREAKING) {\n        if (invalidSingleType) {\n          this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n            at: createPositionWithColumnOffset(invalidSingleType.loc.end, 1),\n            typeParameterName: invalidSingleType.name.name,\n          });\n        }\n      }\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE || isParenthesized) && [\n              \"expression\",\n              true,\n            ],\n            TSTypeAssertion: (binding !== BIND_NONE || isParenthesized) && [\n              \"expression\",\n              true,\n            ],\n          },\n          type,\n        ) || super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n                at: expr,\n              });\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | ?N.TsInterfaceDeclaration {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        leftOfAs = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`(_ => ({\n  ClassNameIsRequired: _(\"A class name is required.\"),\n  UnexpectedSpace: _(\"Unexpected space in placeholder.\"),\n}));\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Placeholder\" || super.isValidLVal(type, ...rest);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  ObjectMember,\n  /*:: TsNamedTypeElementBase, */\n  /*:: PrivateName, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  +parsePrivateName: () => PrivateName\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError({ at: node });\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(Errors.RestTrailingComma, { at: prop });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isParenthesized\n   *        Whether the node in question is parenthesized.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  // eslint-disable-next-line no-unused-vars\n  isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor,\n      binding?: BindingTypes,\n      checkClashes?: Set<string> | false,\n      strictModeChanged?: boolean,\n      allowingSloppyLetBinding?: boolean,\n      hasParenthesizedAncestor?: boolean,\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      hasParenthesizedAncestor || expression.extra?.parenthesized,\n      binding,\n    );\n\n    if (validity === true) return;\n\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // Flow has difficulty tracking `key` and `expression`, but only if we use\n    // null-proto objects. If we use normal objects, everything works fine.\n    // $FlowIgnore\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(Errors.InvalidRestAssignmentPattern, {\n        at: node.argument,\n      });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\ndeclare var invariant;\n*/\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, {\n        in: this.finishNode(node, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        val,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // $FlowIgnore\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // $FlowIgnore\n                !!node.key\n                  ? node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" };\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      { at: node },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      { at: node },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassProperty> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateProperty> = member;\n    const accessorProp: $FlowSubtype<N.ClassAccessorProperty> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = (prop.key: N.Expression);\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier(specifier: N.Node, type: string) {\n    this.checkLVal(specifier.local, {\n      in: specifier,\n      binding: BIND_LEXICAL,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value,\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"]},"metadata":{},"sourceType":"script"}